/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime.Web;

use Runtime.lib;
use Runtime.re;
use Runtime.Context;
use Runtime.CoreStruct;
use Runtime.RuntimeUtils;
use Runtime.Annotations.IntrospectionClass;
use Runtime.Web.Annotations.Route;
use Runtime.Web.Annotations.RouteList;
use Runtime.Web.RenderContainer;
use Runtime.Web.Request;


static class RenderHelper
{
	
	/**
	 * Returns css name
	 */
	lambda memorize string getCssName(string class_name, string css_name)
	{
		string hash = RuntimeUtils::getCssHash(class_name);
		Collection<string> arr = rs::split(" ", css_name);
		arr = arr.map(string (string s) use (hash) => s ~ "-" ~ hash);
		string name = rs::join(" ", arr);
		return name;
	}
	
	
	
	/**
	 * Escape attr
	 */
	lambda string escapeAttr(string s)
	{
		return rs::escapeHtml(s);
	}
	
	
	
	/**
	 * Escape html
	 */
	lambda string escapeHtml(var s)
	{
		#switch
		#case ifcode PHP then
		if ($s instanceof \Runtime\RawString) return $s->toString();
		#endswitch
		if (rtl::isString(s)) return rs::escapeHtml(s);
		if (s instanceof Collection) return rs::join("", s);
		return rs::escapeHtml( rtl::toString(s) );
	}
	
	
	
	/**
	 * To html
	 */
	lambda string toHtml(var s)
	{
		if (rtl::isString(s)) return s;
		if (s instanceof Collection) return rs::join("", s);
		return rtl::toString(s);
	}
	
	
	
	/**
	 * Json encode
	 */
	lambda string json_encode(var obj)
	{
		return RuntimeUtils::json_encode(obj);
	}
	
}
