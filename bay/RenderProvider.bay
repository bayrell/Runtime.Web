/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseProvider;
use Runtime.Serializer;
use Runtime.Exceptions.ItemNotFound;
use Runtime.Web.AppComponent;
use Runtime.Web.BaseApp;
use Runtime.Web.BaseModel;
use Runtime.Web.Events;
use Runtime.Web.RenderContainer;
use Runtime.Web.RouteInfo;
use Runtime.Web.Hooks.AppHook;


class RenderProvider extends BaseProvider
{
	var vue = null;
	var layout = null;
	var element = null;
	string layout_data = "app_data";
	string layout_name = "app_layout";
	string selector = "core_ui_root";
	bool break_start = false;
	bool enable_ssr = true;
	Map components = {};
	Events events = new Events;
	
	
	/**
	 * Returns instance
	 */
	static RenderProvider instance() => @.provider(classof RenderProvider);
	
	
	/**
	 * Constructor
	 */
	void constructor(Dict params = null)
	{
		parent(params);
		if (params)
		{
			if (params.has("element")) this.element = params.get("element");
			if (params.has("layout")) this.layout = params.get("layout");
			if (params.has("layout_data")) this.layout_data = params.get("layout_data");
			if (params.has("layout_name")) this.layout_name = params.get("layout_name");
			if (params.has("selector")) this.selector = params.get("selector");
			if (params.has("enable_ssr")) this.enable_ssr = params.get("enable_ssr");
			if (params.has("break_start")) this.break_start = params.get("break_start");
		}
		
		/* Add events */
		this.events.add("onBeforeUpdate", method this.updateWidget);
		this.events.add("onMounted", method this.addWidget);
		this.events.add("onUnmount", method this.removeWidget);
	}
	
	
	/**
	 * Returns root element
	 */
	var getRootElement() => this.element ? this.element : document.getElementById(this.selector);
	
	
	/**
	 * Init provider
	 */
	async void init()
	{
		await parent::init();
		
		#ifdef FRONTEND then
		
		/* Create render container */
		BaseApp app = @.getApp();
		this.container = app.createRenderContainer();
		
		#endif
	}
	
	
	/**
	 * Returns app data
	 */
	var getAppData()
	{
		var app_data = window[this.layout_data];
		if (!rtl::exists(app_data))
		{
			throw new ItemNotFound(this.layout_data, "App data");
		}
		
		Serializer serializer = new Serializer();
		serializer.setFlag(Serializer::ALLOW_CLASS_NAME);
		app_data = serializer.toPrimitive(app_data, Serializer::ALLOW_CLASS_NAME);
		return app_data;
	}
	
	
	/**
	 * Load layout
	 */
	void loadLayout()
	{
		if (this.layout != null) return;
		
		var Vue = window["Vue"];
		
		/* Get data */
		var app_data = this.getAppData();
		
		/* Import data */
		this.container.importData(app_data);
		
		/* Create layout */
		this.layout = Vue.reactive(this.container.layout);
		
		#ifcode JAVASCRIPT then
		if (window) window[this.layout_name] = this.layout;
		#endif
	}
	
	
	/**
	 * Start App
	 */
	void startApp(Dict options)
	{
		var vue_app = null;
		var Vue = window["Vue"];
		fn registerLayout = null;
		
		#ifcode JAVASCRIPT then
		registerLayout = (layout) =>
		{
			return {
				install: () => {
					vue_app.config.globalProperties.$layout = layout;
				},
			};
		};
		#endif
		
		/* Get props */
		var component = rtl::find_class(options.get("component"));
		Dict props = options.get("props");
		
		/* Create vue app */
		bool enable_ssr = options.get("enable_ssr", false);
		if (enable_ssr)
		{
			vue_app = Vue.createSSRApp(component, props.toObject());
		}
		else
		{
			vue_app = Vue.createApp(component, props.toObject());
		}
		
		/* Register layout  */
		vue_app.use(registerLayout(this.layout));
		
		/* Register other modules */
		await @.callHookAsync(AppHook::VUE_MODULES, {
			"render_provider": this,
			"vue": vue_app,
		});
		
		/* Mount app */
		vue_app.mount(options.get("element"), true);
		
		return vue_app;
	}
	
	
	/**
	 * Start provider
	 */
	async void start()
	{
		await parent::start();
		
		#ifdef FRONTEND then
		
		/* Load layout */
		this.loadLayout();
		if (this.break_start)
		{
			return;
		}
		
		/* Start App */
		this.vue = this.startApp({
			"element": this.getRootElement(),
			"component": classof AppComponent
			"enable_ssr": this.enable_ssr,
			"props": {
				"model": this.layout,
			},
		});
		
		#endif
	}
	
	
	/**
	 * Next tick
	 */
	static async void nextTick(fn f)
	{
		var Vue = window["Vue"];
		await Vue.nextTick(f);
	}
	
	
	/**
	 * Add widget
	 */
	void addWidget(var component)
	{
		string model_path = component.model.getModelPathString();
		this.components.set(model_path, component);
		component._model_path = model_path;
		/*log("add", model_path);*/
	}
	
	
	/**
	 * Remove widget
	 */
	void removeWidget(var component)
	{
		if (not rtl::exists(component)) return;
		if (not rtl::exists(component._model_path)) return;
		/*log("remove", component._model_path);*/
		this.components.remove(component._model_path);
		component._model_path = null;
	}
	
	
	/**
	 * Update widget
	 */
	void updateWidget(var component)
	{
		var old_component = null;
		string model_path_old = component._model_path;
		string model_path_new = component.model.getModelPathString();
		
		if (model_path_new != model_path_old)
		{
			/* Remove old component */
			old_component = model_path_old ? this.components.get(model_path_old) : null;
			if (old_component)
			{
				this.removeWidget(old_component);
			}
			
			/* Remove new component */
			old_component = model_path_new ? this.components.get(model_path_new) : null;
			if (old_component)
			{
				this.removeWidget(old_component);
			}
			
			/* Add new component */
			this.addWidget(component);
			
			/*log("update", model_path_old, "->", model_path_new);*/
		}
	}
	
	
	/**
	 * Update model path
	 */
	static void updateModelPath(BaseModel widget, Collection new_model_path)
	{
		widget.model_path = new_model_path.slice();
		
		/* Update widgets */
		widget.widgets.each(
			void (BaseModel item) use (widget)
			{
				RenderProvider::updateModelPath(
					item,
					widget.model_path.concat(
						["widgets", item.widget_name]
					)
				);
			}
		);
	}
}

#ifcode ES6 then
Runtime.Web.Component.render = function ()
{
	return this.render();
}
Runtime.Web.Component.computed = {
	layout: function (){
		return this.$layout;
	}
}
Runtime.Web.Component.beforeCreate = function ()
{
	return this.$options.onBeforeCreate();
}
Runtime.Web.Component.created = function ()
{
	var provider = global_context.provider("Runtime.Web.RenderProvider");
	provider.events.emit("onCreatedBefore", [this]);
	this.onCreated();
	provider.events.emit("onCreated", [this]);
}
Runtime.Web.Component.beforeMount = function ()
{
	var provider = global_context.provider("Runtime.Web.RenderProvider");
	provider.events.emit("onBeforeMountBefore", [this]);
	this.onBeforeMount();
	provider.events.emit("onBeforeMount", [this]);
}
Runtime.Web.Component.mounted = function ()
{
	var provider = global_context.provider("Runtime.Web.RenderProvider");
	provider.events.emit("onMountedBefore", [this]);
	this.onMounted();
	provider.events.emit("onMounted", [this]);
}
Runtime.Web.Component.beforeUpdate = function ()
{
	var provider = global_context.provider("Runtime.Web.RenderProvider");
	provider.events.emit("onBeforeUpdateBefore", [this]);
	this.onBeforeUpdate();
	provider.events.emit("onBeforeUpdate", [this]);
}
Runtime.Web.Component.updated = function ()
{
	var provider = global_context.provider("Runtime.Web.RenderProvider");
	provider.events.emit("onUpdatedBefore", [this]);
	this.onUpdated();
	provider.events.emit("onUpdated", [this]);
}
Runtime.Web.Component.beforeUnmount = function ()
{
	var provider = global_context.provider("Runtime.Web.RenderProvider");
	provider.events.emit("onBeforeUnmountBefore", [this]);
	this.onBeforeUnmount();
	provider.events.emit("onBeforeUnmount", [this]);
}
Runtime.Web.Component.unmounted = function ()
{
	var provider = global_context.provider("Runtime.Web.RenderProvider");
	provider.events.emit("onUnmountBefore", [this]);
	this.onUnmount();
	provider.events.emit("onUnmount", [this]);
}
#endif