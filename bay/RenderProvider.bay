/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseProvider;
use Runtime.Serializer;
use Runtime.Exceptions.ItemNotFound;
use Runtime.Web.AppComponent;
use Runtime.Web.BaseApp;
use Runtime.Web.RenderContainer;
use Runtime.Web.RouteInfo;
use Runtime.Web.Hooks.AppHook;


class RenderProvider extends BaseProvider
{
	var vue = null;
	string layout_data = "app_data";
	string layout_name = "app_layout";
	string selector = "#core_ui_root";
	bool break_start = false;
	bool enable_ssr = true;
	
	
	/**
	 * Constructor
	 */
	void constructor(Dict params = null)
	{
		parent(params);
		if (params)
		{
			if (params.has("layout_data")) this.layout_data = params.get("layout_data");
			if (params.has("layout_name")) this.layout_name = params.get("layout_name");
			if (params.has("selector")) this.selector = params.get("selector");
			if (params.has("enable_ssr")) this.enable_ssr = params.get("enable_ssr");
			if (params.has("break_start")) this.break_start = params.get("break_start");
		}
	}
	
	
	/**
	 * Init provider
	 */
	async void init()
	{
		await parent::init();
		
		/* Create render container */
		BaseApp app = @.getApp();
		this.container = app.createRenderContainer();
	}
	
	
	/**
	 * Returns app data
	 */
	var getAppData()
	{
		var app_data = window[this.layout_data];
		if (!rtl::exists(app_data))
		{
			throw new ItemNotFound(this.layout_data, "App data");
		}
		
		Serializer serializer = new Serializer();
		serializer.setFlag(Serializer::ALLOW_CLASS_NAME);
		app_data = serializer.toPrimitive(app_data, Serializer::ALLOW_CLASS_NAME);
		return app_data;
	}
	
	
	/**
	 * Load layout
	 */
	void loadLayout()
	{
		var Vue = window["Vue"];
		
		/* Get data */
		var app_data = this.getAppData();
		
		/* Import data */
		this.container.importData(app_data);
		
		/* Create layout */
		this.layout = Vue.reactive(this.container.layout);
		
		#ifcode JAVASCRIPT then
		if (window) window[this.layout_name] = this.layout;
		#endif
	}
	
	
	/**
	 * Start Vue App
	 */
	void startVueApp()
	{
		var Vue = window["Vue"];
		fn registerLayout = null;
		
		#ifcode JAVASCRIPT then
		registerLayout = (layout) =>
		{
			return {
				install: () => {
					this.vue.config.globalProperties.$layout = layout;
				},
			};
		};
		#endif
		
		/* Get props */
		var component = rtl::find_class(classof AppComponent);
		Dict props = {
			"model": this.layout,
		};
		
		/* Create vue app */
		if (this.enable_ssr)
		{
			this.vue = Vue.createSSRApp(component, props.toObject());
		}
		else
		{
			this.vue = Vue.createApp(component, props.toObject());
		}
		
		/* Register layout  */
		this.vue.use(registerLayout(this.layout));
		
		/* Register other modules */
		await @.callHookAsync(AppHook::VUE_MODULES, {
			"render_provider": this,
			"vue": this.vue,
		});
		
		/* Mount app */
		this.vue.mount(this.selector, true);
	}
	
	
	/**
	 * Start provider
	 */
	async void start()
	{
		await parent::start();
		
		/* Load layout */
		this.loadLayout();
		if (this.break_start)
		{
			return;
		}
		
		/* Start Vue App */
		this.startVueApp();
	}
}

#ifcode ES6 then
Runtime.Web.Component.render = function ()
{
	return this.render();
}
Runtime.Web.Component.computed = {
	layout: function (){
		return this.$layout;
	}
}
Runtime.Web.Component.beforeCreate = function ()
{
	return this.$options.onBeforeCreate();
}
Runtime.Web.Component.created = function ()
{
	return this.onCreated();
}
Runtime.Web.Component.beforeMount = function ()
{
	return this.onBeforeMount();
}
Runtime.Web.Component.mounted = function ()
{
	return this.onMounted();
}
Runtime.Web.Component.beforeUpdate = function ()
{
	return this.onBeforeUpdate();
}
Runtime.Web.Component.updated = function ()
{
	return this.onUpdated();
}
Runtime.Web.Component.beforeUnmount = function ()
{
	return this.onBeforeUnmount();
}
Runtime.Web.Component.unmounted = function ()
{
	return this.onUnmounted();
}
#endif