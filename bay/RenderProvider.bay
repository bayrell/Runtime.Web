/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseProvider;
use Runtime.Serializer;
use Runtime.Web.AppComponent;
use Runtime.Web.BaseApp;
use Runtime.Web.RenderContainer;
use Runtime.Web.RouteInfo;
use Runtime.Web.Hooks.AppHook;


class RenderProvider extends BaseProvider
{
	var vue = null;
	
	/**
	 * Constructor
	 */
	void constructor(Dict params = null)
	{
		parent(params);
	}
	
	
	/**
	 * Init provider
	 */
	async void init()
	{
		await parent::init();
		
		/* Create render container */
		BaseApp app = @.getApp();
		this.container = app.createRenderContainer();
	}
	
	
	/**
	 * Start provider
	 */
	async void start()
	{
		await parent::start();
		
		fn createLayout = null;
		
		#ifcode JAVASCRIPT then
		createLayout = (layout) =>
		{
			return {
				install: () => {
					this.vue.config.globalProperties.$layout = layout;
				},
			};
		};
		#endif
		
		var Vue = window["Vue"];
		
		/* Get data */
		var app_data = window["app_data"];
		Serializer serializer = new Serializer();
		serializer.setFlag(Serializer::ALLOW_CLASS_NAME);
		app_data = serializer.toPrimitive(app_data, Serializer::ALLOW_CLASS_NAME);
		
		/* Import data */
		this.container.importData(app_data);
		
		/* Get render settings */
		Map render_settings = @.callHook(AppHook::RENDER_PROVIDER_SETTINGS, {
			"app": "#core_ui_root",
			"ssr": true,
			"break": false,
		});
		
		/* Create layout */
		this.layout = Vue.reactive(this.container.layout);
		
		#ifcode JAVASCRIPT then
		if (window) window["app_layout"] = this.layout;
		#endif
		
		/* Get props */
		var component = rtl::find_class(classof AppComponent);
		Dict props = {
			"model": this.layout,
		};
		
		bool is_break = render_settings.get("break");
		if (is_break)
		{
			return;
		}
		
		/* Create vue app */
		bool is_ssr = render_settings.get("ssr");
		if (is_ssr)
		{
			this.vue = Vue.createSSRApp(component, props.toObject());
		}
		else
		{
			this.vue = Vue.createApp(component, props.toObject());
		}
		
		/* Add modules */
		this.vue.use(createLayout(this.layout));
		
		await @.callHookAsync(AppHook::VUE_MODULES, {
			"vue": this.vue,
		});
		
		/* Mount app */
		string app_selector = render_settings.get("app");
		this.vue.mount(app_selector, true);
	}
}

#ifcode ES6 then
Runtime.Web.Component.render = function ()
{
	return this.render();
}
Runtime.Web.Component.computed = {
	layout: function (){
		return this.$layout;
	}
}
Runtime.Web.Component.beforeCreate = function ()
{
	return this.$options.onBeforeCreate();
}
Runtime.Web.Component.created = function ()
{
	return this.onCreated();
}
Runtime.Web.Component.beforeMount = function ()
{
	return this.onBeforeMount();
}
Runtime.Web.Component.mounted = function ()
{
	return this.onMounted();
}
Runtime.Web.Component.beforeUpdate = function ()
{
	return this.onBeforeUpdate();
}
Runtime.Web.Component.updated = function ()
{
	return this.onUpdated();
}
Runtime.Web.Component.beforeUnmount = function ()
{
	return this.onBeforeUnmount();
}
Runtime.Web.Component.unmounted = function ()
{
	return this.onUnmounted();
}
#endif