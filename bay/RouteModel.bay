/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.SerializeInterface;
use Runtime.Serializer;
use Runtime.Entity.Factory;
use Runtime.Web.RouteInfo;
use Runtime.Web.RenderContainer;


class RouteModel extends RouteInfo
{
	var model = null;
	
	
	/**
	 * Process frontend data
	 */
	void serialize(Serializer serializer, Map data)
	{
		serializer.process(this, "model", data, var (Serializer serializer, Map data)
		{
			if (rtl::isString(data))
			{
				return data;
			}
			if (not (data instanceof Dict)) return null;
			if (not data.get("__class_name__", "Runtime.Entity.Factory")) return null;
			return new Factory(data.get("name"), data.get("params"));
		});
		parent(serializer, data);
	}
	
	
	/**
	 * Render route
	 */
	async void render(RenderContainer container)
	{
		string page_model_name = "";
		Dict params = null;
		
		/* Get model params */
		if (this.model instanceof Factory)
		{
			page_model_name = this.model.name;
			params = Serializer::copy(this.model.params);
		}
		else
		{
			page_model_name = this.model;
		}
		
		/* Check page model */
		if (page_model_name == "") return;
		if (not rtl::class_exists(page_model_name)) return;
		
		/* Render page model */
		await container.renderPageModel(page_model_name, params);
	}
}