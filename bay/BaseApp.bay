/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseObject;
use Runtime.BaseProvider;
use Runtime.Callback;
use Runtime.Web.BaseLayoutModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Web.RenderContainer;
use Runtime.Web.Request;
use Runtime.Web.RouteInfo;
use Runtime.Web.RouteList;
use Runtime.Web.Hooks.AppHook;


class BaseApp extends BaseObject
{
	/**
	 * Init app
	 */
	async void init()
	{
	}
	
	
	/**
	 * Start app
	 */
	async void start()
	{
	}
	
	
	/**
	 * Run Web Application
	 */
	async int main()
	{
		#ifdef BACKEND then
		
		/* Create container */
		RenderContainer container = this.createRenderContainer();
		await this.initLayout(container);
		
		/* Resolve route */
		this.findRoute(container);
		await this.resolveRoute(container);
		
		/* Send reponse */
		await this.responseBackend(container);
		
		#endif
		
		return 0;
	}
	
	
	/**
	 * Create render container
	 */
	BaseLayoutModel createLayout()
	{
		Dict params = @.callHook(AppHook::LAYOUT_MODEL_NAME, {
			"class_name": classof BaseLayoutModel,
		});
		return rtl::newInstance(params.get("class_name"));
	}
	
	
	/**
	 * Create render container
	 */
	RenderContainer createRenderContainer()
	{
		RenderContainer container = new RenderContainer();
		
		/* Create request */
		container.request = this.createRequest();
		
		/* Create layout */
		container.layout = this.createLayout();
		
		/* Create layout */
		@.callHook(AppHook::CREATE_CONTAINER, {
			"container": container,
		});
		
		return container;
	}
	
		
	#ifdef BACKEND then
	
    
    /**
	 * Find route
	 */
	void findRoute(RenderContainer container)
	{
		/* Call hook find route */
		@.callHook(AppHook::FIND_ROUTE_BEFORE, {
			"container": container,
		});
		
		/* Find route */
		if (container.route == null and container.response == null)
		{
			RouteList routes = @.provider(classof RouteList);
			container.route = routes.findRoute(container);
		}
		
		/* Call hook found route */
		await @.callHook(AppHook::FIND_ROUTE, {
			"container": container,
		});
	}
    
	
	/**
	 * Init layout
	 */
	async void initLayout(RenderContainer container)
	{
		/* Call route before */
		await @.callHookAsync(AppHook::INIT_LAYOUT, {
			"container": container,
			"layout": container.layout,
		});
		
		/* Init layout */
		await container.layout.init(container);
	}
	
	
	/**
	 * Resolve route
	 */
	async void resolveRoute(RenderContainer container)
	{
		/* Call route before */
		await @.callHookAsync(AppHook::ROUTE_BEFORE, {
			"container": container,
		});
		
		/* Call middleware */
		await this.callRouteMiddleware(container);
		
		/* Call layout route before */
		await container.layout.onRouteBefore(container);
		
		/* Load layout data */
		await container.layout.loadData(container);
		
		/* Call route */
		await this.callRoute(container);
		
		/* Call layout route after */
		await container.layout.onRouteAfter(container);
		
		/* Call route after */
		await @.callHookAsync(AppHook::ROUTE_AFTER, {
			"container": container,
		});
	}
	
	
	/**
	 * Call route
	 */
	async void callRoute(RenderContainer container)
	{
		if (container.route == null) return;
		if (container.response != null) return;
		if (container.route.action == null and container.route.model == null) return;
		
		/* Setup page model */
		string page_model_name = container.route.model;
		if (page_model_name != "" and rtl::class_exists(page_model_name))
		{
			container.layout.setPageModel(page_model_name);
		}
		
		/* Setup route */
		string class_name = classof BaseRoute;
		string method_name = "actionIndex";
		
		if (
			container.route.action != null and
			container.route.action instanceof Collection and
			container.route.action.count() == 2
		)
		{
			class_name = container.route.action.get(0);
			method_name = container.route.action.get(1);
		}
		
		/* Call route */
		await container.callRoute(class_name, method_name);
	}
	
	
	/**
	 * Call route middleware
	 */
	async void callRouteMiddleware(RenderContainer container)
	{
		if (container.route and container.route.middleware)
		{
			for (int i = 0; i<container.route.middleware.count(); i++)
			{
				Callback middleware = container.route.middleware.get(i);
				await rtl::apply(middleware, [container]);
			}
		}
		
		/* Call hook middleware */
		await @.callHook(AppHook::ROUTE_MIDDLEWARE, {
			"container": container,
		});
	}
	
	
	/**
	 * Read post
	 */
	Map readPost()
	{
		Map post = null;
		
		#ifcode PHP then
		
		$method = isset($_SERVER['REQUEST_METHOD']) ? $_SERVER['REQUEST_METHOD'] : "";
		$content_type = isset($_SERVER['CONTENT_TYPE']) ? $_SERVER['CONTENT_TYPE'] : "";
		if (substr($content_type, 0, strlen('application/json')) == 'application/json')
		{
			$json = file_get_contents("php://input");
			$post = @json_decode($json);
		}
		else
		{
			if ($method == "POST")
			{
				$post = $_POST;
			}
		}
		
		#endif
		
		return post;
	}
	
	
	/**
	 * Create request
	 */
	Request createRequest()
	{
		Request request = new Request();
		
		#ifcode PHP then
		
		$host = isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : "";
		$uri = isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : "";
		$method = isset($_SERVER['REQUEST_METHOD']) ? $_SERVER['REQUEST_METHOD'] : "";
		$start_time = isset($_SERVER['REQUEST_TIME_FLOAT']) ? $_SERVER['REQUEST_TIME_FLOAT'] : "";
		$content_type = isset($_SERVER['CONTENT_TYPE']) ? $_SERVER['CONTENT_TYPE'] : "";
		
		$query = new \Runtime\Map();
		$payload = new \Runtime\Map();
		$cookies = new \Runtime\Map();
		foreach ($_GET as $key => $val) $query->set($key, $val);
		
		/* Read POST */
		$post = $this->readPost();
		if ($post != null)
		{
			foreach ($post as $key => $val)
			{
				$payload->set($key, $val);
			}
		}
		
		/* Read Cookie */
		foreach ($_COOKIE as $key => $val)
		{
			$cookies->set(
				$key,
				new \Runtime\Web\Cookie(
					\Runtime\Dict::from([
						'name' => $key,
						'value' => $val,
					])
				)
			);
		}
		
		/* Setup uri */
		$request->initUri($uri);
		$request->protocol = isset($_SERVER['HTTP_X_FORWARDED_PROTO']) ?
			$_SERVER['HTTP_X_FORWARDED_PROTO'] : "http";
		
		/* Setup request */
		$request->host = $host;
		$request->method = $method;
		$request->query = $query;
		$request->payload = $payload;
		$request->cookies = $cookies;
		$request->headers = \Runtime\Map::from($_SERVER);
		$request->start_time = $start_time;
		
		#endif
		
		return request;
	}
	
	
	/**
	 * Send response
	 */
	async void responseBackend(RenderContainer container)
	{
		/* Call response */
		await @.callHookAsync(AppHook::RESPONSE, {
			"container": container,
		});
		
		#ifcode PHP then
		
		$response = $container->response;
		
		if ($response != null)
		{
			http_response_code($response->http_code);
			
			/* Setup cookies */
			if ($container->cookies != null)
			{
				$container->cookies->each(
					function (Cookie $cookie)
					{
						if ($cookie == null) return;
						if ($cookie->name == "") return;
						
						setcookie
						(
							$cookie->name,
							$cookie->value,
							$cookie->getOptions()
						);
					}
				);
			}
			
			/* Setup headers */
			if ($response->headers != null)
			{
				$response->headers->each(
					function (string $value, string $key)
					{
						header($key . ":" . $value);
					}
				);
			}
			
			/* Redirect */
			if ($response instanceof \Runtime\Web\RedirectResponse)
			{
				header("Location:" . $response->redirect);
			}
			
			echo $response->getContent();
		}
		
		else
		{
			http_response_code(404);
			echo "404 Response not found";
		}
		
		#endif
	}
	
	
	#endif
	
	
	
	#ifdef FRONTEND then
	
	
	/**
	 * Create request
	 */
	Request createRequest()
	{
		return null;
	}
	
	
	#endif
	
}