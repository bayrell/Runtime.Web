/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.lib;
use Runtime.BaseDriver;
use Runtime.BaseStruct;
use Runtime.Entity;
use Runtime.LambdaChain;
use Runtime.LambdaChainClass;
use Runtime.Web.Component;
use Runtime.Web.Controller;
use Runtime.Web.Element;


@LambdaChainClass{}
class RenderDriver extends BaseDriver
{
	static const string CSS_CHAIN = "Runtime.Web.RenderDriver.CSS";
	static const string CSS_VARS_CHAIN = "Runtime.Web.RenderDriver.CSS_Vars";
	static const string COMPONENTS_CHAIN = "Runtime.Web.RenderDriver.Components";
	
	public BaseStruct layout = null;
	var animation_id = null;
	Vector<Map> controllers = new Vector();
	Collection<Map> components = new Collection();
	Collection<Map> default_components = new Collection();
	Collection path_id = [];
	Collection model_path = [];
	
	/* CSS */
	Dict css_vars = {};
	var css_elem = null;
	string new_css = "";
	string old_css = "";
	
	
	/**
	 * Constructor
	 */
	void constructor(string object_name = "", Entity entity = null)
	{
		parent(object_name, entity);
	}
	
	
	
	/**
	 * Start Driver
	 */
	public async void startDriver()
	{
		await parent::startDriver();
		
		/* Chain components */
		this.default_components = this.callChainComponents();
		
		/* Build css vars */
		this.css_vars = this.callChainCssVars();
	}
	
	
	
	/**
	 * Add component
	 */
	RenderDriver addComponent(string component_name)
	{
		this.components = this.components.pushIm(component_name);
		return this;
	}
	
	
	
	/**
	 * Add components
	 */
	RenderDriver addComponents(Collection<string> components)
	{
		this.components = this.components.concat(components);
		return this;
	}
	
	
	
	/**
	 * Setup components
	 */
	RenderDriver setComponents(Collection<string> components)
	{
		this.components = components;
		return this;
	}
	
	
	
	/**
	 * Setup
	 */
	RenderDriver setLayout(BaseStruct layout)
	{
		this.layout = layout;
		return this;
	}
	
	
	
	/**
	 * Returns model
	 */
	var model(Collection<string> model_path = null, var def_val = null) =>
		rtl::attr(this.layout, model_path, def_val)
	;
	
	
	
	/**
	 * Update model
	 */
	void updateModel(Collection<string> model_path = null, var value = null)
	{
		this.layout = rtl::setAttr(this.layout, model_path, value);
		this.repaint();
	}
	
	
	
	/**
	 * Find controller
	 */
	Controller findControllerByElem(var e)
	{
		for (int i=0; i<this.controllers.count(); i++)
		{
			Controller c = this.controllers[i];
			if (c.parent_elem == e)
			{
				return c;
			}
		}
		return null;
	}
	
	
	
	/**
	 * Find controller
	 */
	Controller findControllerByName(string controller_name)
	{
		for (int i=0; i<this.controllers.count(); i++)
		{
			Controller c = this.controllers[i];
			if (c.controller_name == controller_name)
			{
				return c;
			}
		}
		return null;
	}
	
	
	
	/**
	 * Setup controller
	 */
	Controller addController
	(
		string controller_name, var e,
		string class_name = "", Collection model_path = null,
		Dict params = null, var content = null
	)
	{
		if (model_path == null) model_path = [];
		if (params == null) params = {};
		
		Controller controller = this.findControllerByElem(e);
		if (controller == null)
		{
			controller = new Controller();
			controller.driver = this;
			controller.parent_elem = e;
			controller.addComponent(this);
			this.controllers.pushValue(controller);
		}
		
		controller.class_name = class_name;
		controller.model_path = model_path;
		controller.params = params;
		controller.content = content;
		controller.controller_name = controller_name;
		
		return controller;
	}
	
	
	
	/**
	 * Setup controller
	 */
	RenderDriver setupController
	(
		string controller_name, var e,
		string class_name = "", Collection model_path = null,
		Dict params = null, var content = null
	)
	{
		if (model_path == null) model_path = [];
		if (params == null) params = {};
		
		this.addController(controller_name, e, class_name, model_path, params, content);
		return this;
	}
	
	
	
	/**
	 * Setup css
	 */
	RenderDriver setupCSS(var e)
	{
		this.css_elem = e;
		return this;
	}
	
	
	
	/**
	 * Get css
	 */
	string getCSS(Collection components = null)
	{
		if (components == null) components = this.default_components.concat(this.components);
		
		/* Get css from components */
		string css = static::getCSSFromComponents( components, this.css_vars );
		
		/* Chain css */
		css = this.callChainCss(css);
		
		return css;
	}
	
	
	
	/**
	 * Repaint
	 */
	RenderDriver repaint()
	{
		if (this.animation_id == null)
		{
			this.animation_id = window.@requestAnimationFrame( method this.render );
		}
		
		return this;
	}
	
	
	
	/**
	 * Render function
	 */
	void render()
	{
		@ = rtl::@getContext();
		
		/* Render controllers */
		for (int i=0; i<this.controllers.count(); i++)
		{
			Controller controller = this.controllers[i];
			controller.render();
		}
		
		/* Render css */
		if (this.css_elem != null)
		{
			this.new_css = this.getCSS();
			if (this.new_css != this.old_css)
			{
				if (this.css_elem.textContent != this.new_css) this.css_elem.textContent = this.new_css;
			}
			this.old_css = this.new_css;
		}
		
		this.animation_id = null;
	}
	
	
	
	/**
	 * Retuns css hash
	 * @param string component class name
	 * @return string hash
	 */
	static memorize string hash(string s)
	{
		string r = "";
		string a = "1234567890abcdef";
		int sz = rs::strlen(s);
		int h = 0;
		for (int i=0; i<sz; i++)
		{
			int c = rs::ord( rs::substr(s, i, 1) );
			h = ((h << 2) + (h >> 14) + c) & 65535;
		}
		int p = 0;
		while (h != 0 or p < 4)
		{
			int c = h & 15;
			h = h >> 4;
			r ~= rs::substr(a, c, 1);
			p = p + 1;
		}
		return r;
	}
	
	
	
	/**
	 * Returns css hash
	 */
	pure memorize string getCssHash(string class_name) =>
		rtl::getParents(class_name)
			|> .filter
			(
				bool (string class_name) =>
					class_name != "Runtime.BaseObject" and
					class_name != "Runtime.Core.CoreObject" and
					class_name != "Runtime.Web.Component"
			)
			|> .map
			(
				string (string class_name) => "h-" ~ static::hash(class_name)
			)
		;
	
	
	
	
	/**
	 * Returns css from components
	 */
	pure memorize string getCSSFromComponents(Collection components, Dict css_vars)
	{
		if (components == null) return "";
		
		/* Extend component */
		components = static::getRequiredComponents(components);
		
		/* Get css */
		Collection arr = components.map
		(
			string (string component_name) use (css_vars)
			{
				if (component_name == "") return "";
				if (not rtl::method_exists(component_name, "css")) return "";
				fn f = rtl::method(component_name, "css");
				string css = f(css_vars);
				return css;
			}
		);
		
		string css = rs::join("", arr);
		return css;
	}
	
	
	
	/**
	 * Returns required modules
	 * @param string class_name
	 * @return Collection<string>
	 */
	static void _getRequiredComponents
	(
		Vector<string> res,
		Map<string> cache,
		Collection<string> components
	)
	{
		if (components == null)
			return;
		
		for (int i=0; i<components.count(); i++)
		{
			string class_name = components.item(i);
			if (cache.get(class_name, false) == false)
			{
				cache.setValue(class_name, true);
				if (rtl::method_exists(class_name, "components"))
				{
					fn f = rtl::method(class_name, "components");
					Dict<string> sub_components = f();
					if (sub_components != null)
					{
						static::_getRequiredComponents(res, cache, sub_components);
					}
				}
				res.pushValue(class_name);
			}
		}
	}
	
	
	
	/**
	 * Returns all components
	 * @param Collection<string> components
	 * @return Collection<string>
	 */
	pure Collection<string> getRequiredComponents(Collection<string> components)
	{
		components = components.filter(lib::equalNot("")).removeDuplicatesIm();
		Vector<string> res = new Vector();
		Map<string> cache = new Map();
		static::_getRequiredComponents(res, cache, components);
		res = res.removeDuplicatesIm();
		return res.toCollection();
	}
	
	
	
	/**
	 * Render chain
	 * Create layout model
	 */
	@LambdaChain
	{
		"name": static::CSS_VARS_CHAIN,
		"pos": 0,
	}
	static Dict cssVarsChain(Dict css_vars, RenderDriver render)
	{
		css_vars <= colors <= new Dict
		{
			"default":
			{
				"color": "#fff",
				"background": "#fff",
				"border": "#ccc",
				"text": "#000",
				"hover-background": "#eee",
				"hover-text": "inherit",
			},
			
			"active":
			{
				"color": "#337ab7",
				"background": "#337ab7",
				"border": "#22527b",
				"text": "#fff",
				"hover-background": "#337ab7",
				"hover-text": "#fff",
			},
			
			"primary":
			{
				"color": "#337ab7",
				"background": "#337ab7",
				"border": "#22527b",
				"text": "#fff",
				"hover-background": "#286090",
				"hover-text": "#fff",
				"active-background": "#286090",
				"active-tet": "#fff",
			},
			
			"danger":
			{
				"color": "#d14b42",
				"background": "#d14b42",
				"border": "#a02e27",
				"text": "#fff",
				"hover-background": "#e60000",
				"hover-text": "#fff",
				"active-background": "#e60000",
				"active-tet": "#fff",
			},
			
			"success":
			{
				"color": "green",
				"background": "green",
				"border": "green",
				"text": "#fff",
				"hover": "green",
				"hover-text": "#fff",
				"active": "green",
				"active-tet": "#fff",
			},
			
			"error":
			{
				"color": "#d14b42",
				"background": "#d14b42",
				"border": "#a02e27",
				"text": "#fff",
				"hover-background": "#e60000",
				"hover-text": "#fff",
				"active-background": "#e60000",
				"active-tet": "#fff",
			},
			
			"warning":
			{
				"color": "yellow",
				"background": "yellow",
				"border": "yellow",
				"text": "#fff",
				"hover": "yellow",
				"hover-text": "#fff",
				"active": "yellow",
				"active-tet": "#fff",
			},
		};
		
		css_vars <= font <= new Dict
		{
			"size": "14px",
		};
		
		return [ css_vars, render ];
	}
	
	
	
	/**
	 * CSS vars chain
	 */
	Dict callChainCssVars() =>
		@.chain(static::CSS_VARS_CHAIN, [new Dict(), this])
		|> attr 0
		|> default Dict {}
	;
	
	
	
	/**
	 * CSS vars chain
	 */
	Collection callChainComponents() =>
		@.chain(static::COMPONENTS_CHAIN, [new Collection(), this])
		|> attr 0
		|> default Collection []
	;
	
	
	
	/**
	 * CSS vars chain
	 */
	string callChainCss(string css) =>
		@.chain(static::CSS_CHAIN, [css, this])
		|> attr 0
		|> default string ""
	;
} 
