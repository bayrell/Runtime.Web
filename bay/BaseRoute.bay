/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseObject;
use Runtime.Web.LayoutModel;
use Runtime.Web.BasePageModel;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderResponse;
use Runtime.Web.RouteInfo;
use Runtime.Web.RouteList;


class BaseRoute extends BaseObject
{
	protected bool is_cancel_route = false;
	protected RenderContainer container;
	protected LayoutModel layout;
	
	
	/**
	 * Constructor
	 */
	void constructor(RenderContainer container)
	{
		parent();
		this.container = container;
		this.layout = container.layout;
	}
	
	
	/**
	 * Returns routes
	 */
	static Collection<RouteInfo> getRoutes()
	{
		return [];
	}
	
	
	/**
	 * Before route
	 */
	async void onActionBefore()
	{
	}
	
	
	/**
	 * After route
	 */
	async void onActionAfter()
	{
	}
	
	
	/**
	 * Action index
	 */
	async void actionIndex()
	{
		/* Get page model */
		BasePageModel page_model = this.layout.getPageModel();
		if (not page_model) return;
		
		/* Call route before */
		await page_model.onRouteBefore(this.container);
		if (this.isCancelRoute()) return;
		
		/* Load widget data */
		await page_model.loadData(this.container);
		if (this.isCancelRoute()) return;
		
		/* Render page */
		this.renderPage();
		
		/* Call route after */
		await page_model.onRouteAfter(this.container);
	}
	
	
	/**
	 * Render page and setup response
	 */
	void renderPage(string page_class_name = "")
	{
		this.container.renderPage(page_class_name);
	}
	
	
	/**
	 * Cancel route
	 */
	void cancelRoute()
	{
		this.is_cancel_route = true;
	}
	
	
	/**
	 * Returns true if current route is canceled
	 */
	void isCancelRoute()
	{
		return this.is_cancel_route;
	}
	
	
	/**
	 * Returns url
	 */
	static string url(string route_name, Dict route_params = null)
	{
		RouteList routes = @.provider(classof RouteList);
		return routes.url(route_name, route_params);
	}
}