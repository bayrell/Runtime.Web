/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseObject;
use Runtime.ModelProxy;
use Runtime.RouteInfo;
use Runtime.Web.RenderContainer;
use Runtime.Web.RouteList;


class BaseRoute extends BaseObject
{
	bool is_cancel_route = false;
	RenderContainer container = null;
	ModelProxy layout_proxy = null;
	ModelProxy page_model_proxy = null;
	
	
	/**
	 * Returns layout name
	 */
	string getLayoutName() => "default";
	
	
	/**
	 * Returns page model
	 */
	string getPageModelName() => "";
	
	
	/**
	 * Returns routes
	 */
	pure Collection<RouteInfo> getRoutes() => [];
	
	
	/**
	 * Set page title
	 */
	void setTitle(string title)
	{
		this.container.setTitle(title);
	}
	
	
	/**
	 * Set page title
	 */
	void setPageTitle(string title)
	{
		this.container.setPageTitle(title);
	}
	
	
	/**
	 * Set page description
	 */
	void setPageDescription(string description)
	{
		ModelProxy seo = this.layout_proxy.proxy(["models", "seo"]);
		seo.setAttr("description", description);
	}
	
	
	/**
	 * Set new page model
	 */
	void setPageModel(string page_model)
	{
		this.container.setPageModel(page_model);
		this.page_model_proxy = this.container.modelProxy();
	}
	
	
	/**
	 * Before route
	 */
	async void onActionBefore()
	{
		/* Setup layout */
		string layout_name = this.getLayoutName();
		if (layout_name)
		{
			this.container.setLayoutName(layout_name);
		}
		
		/* Setup layout proxy */
		this.layout_proxy = this.container.layoutProxy();
		
		/* Setup page model */
		string model_name = this.getPageModelName();
		if (model_name)
		{
			this.container.setPageModel( rtl::newInstance(model_name) );
			this.page_model_proxy = this.container.modelProxy();
		}
	}
	
	
	/**
	 * After route
	 */
	async void onActionAfter()
	{
	}
	
	
	/**
	 * Cancel route
	 */
	void cancelRoute()
	{
		this.is_cancel_route = true;
	}
	
	
	/**
	 * Returns true if current route is canceled
	 */
	bool isCancelRoute()
	{
		return this.is_cancel_route;
	}
	
	
	/**
	 * Returns url
	 */
	static string url(string route_name, Dict route_params = null)
	{
		RouteList routes = @.provider(classof RouteList);
		return routes.url(route_name, route_params);
	}
	
	
	/**
	 * Render page and setup response
	 */
	void render(string class_name = "")
	{
		this.container.render(class_name);
	}
	
	
	/**
	 * Redirect to url
	 */
	void redirect(string url, int http_code = 301)
	{
		this.container.redirect(url, http_code);
	}
}