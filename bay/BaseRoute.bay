/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseObject;
use Runtime.BaseStruct;
use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.RenderContainer;
use Runtime.Web.RouteInfo;
use Runtime.Web.RouteList;


class BaseRoute extends BaseObject
{
	bool is_cancel_route = false;
	RenderContainer container = null;
	ModelProxy layout = null;
	ModelProxy page_model = null;
	
	
	/**
	 * Returns layout name
	 */
	string getLayoutName() => "default";
	
	
	/**
	 * Returns page model
	 */
	string getPageModelName() => "";
	
	
	/**
	 * Returns routes
	 */
	pure Collection<RouteInfo> getRoutes() => [];
	
	
	/**
	 * Set page title
	 */
	void setTitle(string title)
	{
		this.container.setTitle(title);
	}
	
	
	/**
	 * Set page title
	 */
	void setPageTitle(string title)
	{
		this.container.setPageTitle(title);
	}
	
	
	/**
	 * Set page description
	 */
	void setPageDescription(string description)
	{
		ModelProxy seo = this.layout.proxy(["models", "seo"]);
		seo.commit("setDescription", description)
	}
	
	
	/**
	 * Set new page model
	 */
	void setPageModel(string page_model)
	{
		this.container.setPageModel(page_model);
		this.page_model = this.container.modelProxy();
	}
	
	
	/**
	 * Add widget
	 */
	async ModelProxy<BaseModel> addWidget
	(
		BaseModel widget, ModelProxy<BaseModel> parent_model = null
	)
	{
		if (parent_model == null)
		{
			parent_model = this.page_model;
		}
		
		/* Setup widget path */
		string widget_path = "";
		
		widget_path = parent_model.data("widget_path");
		widget_path = (widget_path != "")
			? widget_path ~ "." ~ widget.widget_name
			: widget.widget_name
		;
		
		widget <= widget_path <= widget_path;
		
		/* Add widget */
		parent_model.commit("addWidget", widget);
		
		/* Get widget proxy */
		ModelProxy<BaseModel> widget_proxy = parent_model.proxy(["widgets", widget.widget_name]);
		
		/* Setup new widget */
		await widget_proxy.commitAsync("createWidget", this);
		
		/* Return widget */
		return widget_proxy;
	}
	
	
	/**
	 * Load widgets
	 */
	async void loadWidgets()
	{
		await this.page_model.commitAsync("initWidgets", this);
		await this.page_model.commitAsync("loadWidgets", this);
	}
	
	
	/**
	 * Before route
	 */
	async void onActionBefore()
	{
		/* Setup layout */
		string layout_name = this.getLayoutName();
		if (layout_name)
		{
			this.container.setLayoutName(layout_name);
		}
		
		/* Setup layout proxy */
		this.layout = this.container.layoutProxy();
		
		/* Setup page model */
		string model_name = this.getPageModelName();
		if (model_name)
		{
			this.container.setPageModel( rtl::newInstance(model_name) );
			this.page_model = this.container.modelProxy();
			await this.page_model.commit("createWidget", this);
		}
	}
	
	
	/**
	 * After route
	 */
	async void onActionAfter()
	{
	}
	
	
	/**
	 * Cancel route
	 */
	void cancelRoute()
	{
		this.is_cancel_route = true;
	}
	
	
	/**
	 * Returns true if current route is canceled
	 */
	bool isCancelRoute()
	{
		return this.is_cancel_route;
	}
	
	
	/**
	 * Returns url
	 */
	static string url(string route_name, Dict route_params = null)
	{
		RouteList routes = @.provider(classof RouteList);
		return routes.url(route_name, route_params);
	}
	
	
	/**
	 * Render page and setup response
	 */
	void render(string class_name = "")
	{
		this.container.render(class_name);
	}
	
	
	/**
	 * Redirect to url
	 */
	void redirect(string url, int http_code = 301)
	{
		this.container.redirect(url, http_code);
	}
	
	
	/**
	 * Returns page model proxy
	 */
	ModelProxy modelProxy(Collection path = null) => this.container.modelProxy(path);
	ModelProxy proxy(Collection path = null) => this.container.modelProxy(path);
	
	
	/**
	 * Returns layout model proxy
	 */
	ModelProxy layoutProxy(Collection path = null)
		=> this.container.layoutProxy(path)
	;
	
	
	/**
	 * Returns model
	 */
	BaseStruct model() => this.container.layout.getPageModel();
	
}