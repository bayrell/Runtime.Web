/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.Events;

use Runtime.Web.Events.BaseEvent;
use Runtime.Web.Interfaces.ElementInterface;


struct WebEvent extends BaseEvent
{
	public string name = "";
	public bool bubbles = false;
	public bool cancel_bubble = false;
	public bool cancelable = true;
	public bool composed = true;
	public bool default_prevented = false;
	public int event_phase = 0;
	public bool is_trusted = true;
	public var es6_event = null;
	public var currentElement = null;
	public var target = null;
	
	
	/**
	 * Returns es6 event name
	 */
	static string getES6EventName() => "";
	
	
	static void assignEventObject(var obj, var e)
	{
		#switch
		#case ifcode ES6 then
		
		obj.setValue(ctx, "name", e.type);
		obj.setValue(ctx, "currentElement", e.target);
		obj.setValue(ctx, "target", e.currentTarget);
		obj.setValue(ctx, "bubbles", e.bubbles);
		obj.setValue(ctx, "cancel_bubble", e.cancel_bubble);
		obj.setValue(ctx, "cancelable", e.cancelable);
		obj.setValue(ctx, "composed", e.composed);
		obj.setValue(ctx, "default_prevented", e.default_prevented);
		obj.setValue(ctx, "event_phase", e.event_phase);
		obj.setValue(ctx, "is_trusted", e.isTrusted);
		obj.setValue(ctx, "es6_event", e);
		
		#endswitch
	}
	
	static WebEvent fromEvent(var e)
	{
		#switch
		#case ifcode ES6 then
		var target = e.currentTarget || e.target;
		var doc = target.ownerDocument || target;
		var win = doc.defaultView;
		var event = null;
		var obj = new Runtime.Map();
		var class_name = "";
		
		if (e.type == "click") class_name = "Runtime.Web.Events.MouseClickEvent";
		else if (e.type == "dblclick") class_name = "Runtime.Web.Events.MouseDoubleClickEvent";
		else if (e.type == "contextmenu") class_name = "Runtime.Web.Events.MouseContextMenuEvent";
		else if (e.type == "mousedown") class_name = "Runtime.Web.Events.MouseDownEvent";
		else if (e.type == "mouseenter") class_name = "Runtime.Web.Events.MouseEnterEvent";
		else if (e.type == "mouseleave") class_name = "Runtime.Web.Events.MouseLeaveEvent";
		else if (e.type == "mousemove") class_name = "Runtime.Web.Events.MouseMoveEvent";
		else if (e.type == "mouseout") class_name = "Runtime.Web.Events.MouseOutEvent";
		else if (e.type == "mouseover") class_name = "Runtime.Web.Events.MouseOverEvent";
		else if (e.type == "mouseup") class_name = "Runtime.Web.Events.MouseUpEvent";
		else if (e.type == "wheel") class_name = "Runtime.Web.Events.MouseWheelEvent";
		else if (e.type == "change") class_name = "Runtime.Web.Events.ChangeEvent";
		else if (e.type == "focus") class_name = "Runtime.Web.Events.FocusEvent";
		else if (e.type == "blur") class_name = "Runtime.Web.Events.BlurEvent";
		else if (e.type == "keydown") class_name = "Runtime.Web.Events.KeyDownEvent";
		else if (e.type == "keypress") class_name = "Runtime.Web.Events.KeyUpEvent";
		else if (e.type == "keyup") class_name = "Runtime.Web.Events.KeyPressEvent";
		
		var class_obj = use(class_name);
		class_obj.assignEventObject(ctx, obj, e);
		event = new class_obj(ctx, obj);
		
		if (event == null)
			return null;
			
		return event;
		#endswitch
	}
	
	
	
	/**
	 * Check if event is cancel
	 */
	bool isCancel()
	{
		return this.cancel_bubble;
	}
	
	
	
	/**
	 * Cancel event
	 */
	pure WebEvent preventDefault(WebEvent event)
	{
		event = event.copy
		{
			"default_prevented": true,
		};
		
		#ifcode ES6 then
		event.es6_event.preventDefault();
		#endif
		
		return event;
	}
	
	
	
	/**
	 * Cancel event
	 */
	pure WebEvent cancel(WebEvent event)
	{
		event = event.copy
		{
			"cancel_bubble": true,
			"default_prevented": true,
		};
		
		#ifcode ES6 then
		event.es6_event.cancelBubble = true;
		event.es6_event.stopPropagation();
		event.es6_event.preventDefault();
		#endif
		
		return event;
	}
	
}