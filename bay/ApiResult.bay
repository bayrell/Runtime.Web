/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.io;
use Runtime.BaseStruct;
use Runtime.Exceptions.ApiException;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.Response;


struct ApiResult extends Response
{
	int code = 0;
	string message = "";
	var data = null;
	string ob_content = "";
	string error_name = null;
	string error_file = "";
	string error_line = "";
	Collection<string> error_trace = null;
	
	
	/**
	 * Init struct data
	 */
	protected Dict _init_data(Dict changed)
	{
		Dict headers = changed["headers"];
		
		if (not this.headers.has("Content-Type"))
		{
			if (headers == null) headers = {};
		}
		
		if (headers != null and not headers.has("Content-Type"))
		{
			changed <= headers <= headers.setIm("Content-Type", "application/json");
		}
		
		return changed;
	}
	
	
	/**
	 * Returns true if error
	 */
	bool isError() => this.code < 0;
	
	
	/**
	 * Returns true if success
	 */
	bool isSuccess() => this.code > 0;
	
	
	/**
	 * Get error message
	 */
	string getErrorMessage() => this.message;
	
	
	/**
	 * Get error code
	 */
	int getErrorCode() => this.code;
	
	
	/**
	 * Debug message
	 */
	void debug()
	{
		Vector res = new Vector();
		
		if (this.code < 0)
		{
			string s = "";
			s ~= "[" ~ this.code ~ "] " ~ this.message;
			
			if (this.error_file and this.error_line)
			{
				s ~= " in " ~ this.error_file ~ ": " ~ this.error_line;
			}
			
			res.pushValue("<b>Fatal error:</b>");
			res.pushValue(s);
			
			if (this.error_trace)
			{
				res.pushValue("<b>Trace:</b>");
				res.pushValue(this.error_trace);
			}
			
			string message = rs::join("\n", res);
			io::print_error(message);
		}
		
	}
	
	
	/**
	 * Returns content
	 */
	string getContent()
	{
		return rtl::json_encode({
			"code": this.code,
			"message": this.message,
			"ob_content": this.ob_content,
			"error_name": this.error_name,
			"error_file": this.error_file,
			"error_line": this.error_line,
			"error_trace": this.error_trace,
			"data": this.data,
		});
	}
	
	
	/**
	 * Set data
	 */
	ApiResult setData(Dict data)
	{
		ApiResult res = this;
		
		if (data == null) return res;
		
		if (data instanceof Dict)
		{
			Collection<string> keys = data.keys();
			for (int i=0; i<keys.count(); i++)
			{
				string key = keys[i];
				res <= data <= { key } <= data[key];
			}
		}
		
		if (data instanceof Collection)
		{
			res <= data <= data;
		}
		
		return res;
	}
	
	
	/**
	 * Setup success
	 */
	ApiResult success(Dict data)
	{
		ApiResult res = this;
		
		if (data.has("code")) res <= code <= data["code"];
		else res <= code <= rtl::ERROR_OK;
		
		if (data.has("message")) res <= message <= data["message"];
		else res <= message <= "Ok";
		
		if (data.has("data")) res = res.setData(data["data"]);
		
		res = res.clone({
			"error_name": "",
			"error_file": "",
			"error_line": "",
			"error_trace": null,
		});
		
		return res;
	}
	
	
	/**
	 * Setup fail
	 */
	ApiResult fail(var e, Dict data = null)
	{
		ApiResult res = this;
		
		if (e instanceof RuntimeException)
		{
			res = res.clone({
				"code": e.getErrorCode(),
				"message": e.getErrorMessage(),
				"error_name": e::getClassName(),
			});
			
			res = res.setData(data);
		}
		else if (e instanceof Dict)
		{
			res = res.clone({
				"code": e.has("code") ? e["code"] : rtl::ERROR_UNKNOWN,
				"message": e.has("message") ? e["message"] : this.message,
				"error_name": e.has("error_name") ? e["error_name"] : this.error_name,
			});
			
			if (e.has("data")) res = res.setData(e["data"]);
		}
		
		return res;
	}
	
	
	/**
	 * Setup exception
	 */
	ApiResult exception(var e, Dict data = null)
	{
		ApiResult res = this;
		
		if (e instanceof RuntimeException)
		{
			res = res.clone({
				"code": e.getErrorCode(),
				"message": e.getErrorMessage(),
				"http_code": 500,
				"error_name": e::getClassName(),
				"error_file": e.getFileName(),
				"error_line": e.getErrorLine(),
				"error_trace": e.getTraceCollection(),
				"err": e,
			});
			
			res = res.setData(data);
			
			return res;
		}
		else
		{
			string message = "";
			string error_file = "";
			string error_line = "";
			Collection<string> error_trace = null;
			
			#ifcode PHP then
			$message = $e->getMessage();
			$error_file = $e->getFile();
			$error_line = $e->getLine();
			$error_trace = $e->getTrace();
			$error_trace = array_map(
				function ($item){
					$prefix = "internal";
					if (isset($item["file"]))
						$prefix = $item["file"] . "(" . $item["line"] . ")";
					else if (isset($item["class"]))
						$prefix = $item["class"];
					return $prefix . ": " . $item["function"];
				},
				$error_trace
			);
			$error_trace = \Runtime\Collection::from($error_trace);
			#endif
			
			return res.clone({
				"code": rtl::ERROR_UNKNOWN,
				"message": message,
				"error": null,
				"data": null,
				"error_file": error_file,
				"error_line": error_line,
				"error_trace": error_trace,
			});
		}
		
		return res;
	}
	
	
	/**
	 * Throw if exception
	 */
	void throwIfException()
	{
		if (this.error_name != "")
		{
			this.debug();
			
			string s = "[" ~ this.code ~ "] " ~ this.message;
			if (this.error_file and this.error_line)
			{
				s ~= " in " ~ this.error_file ~ ": " ~ this.error_line;
			}
			
			throw new ApiException("Api error: " ~ s);
		}
	}
	
}