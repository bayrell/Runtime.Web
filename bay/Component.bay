/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.lib;
use Runtime.BaseObject;
use Runtime.Web.RenderProvider;


class Component extends BaseObject
{
	#ifdef FRONTEND then
	
	Collection model_path = [];
	var old_model = null;
	var params = null;
	var vdom = null;
	var content = null;
	
	
	/**
	 * Returns true if component is changed adn need to repaint
	 */
	bool isChanged(var model, Dict params, var content)
	{
		if (this.old_model != model) return true;
		if (not this.params.equal(params)) return true;
		return false;
	}
	
	
	/**
	 * Update params
	 */
	void updateParams(Collection model_path, Dict params, var content)
	{
		this.model_path = model_path;
		this.params = params;
		this.content = content;
		
		RenderProvider provider = @.provider(classof RenderProvider);
		this.old_model = provider.model(model_path);
	}
	
	
	/**
	 * Create component
	 */
	void onCreate(Collection<string> model_path, Dict params, var content)
	{
		
	}
	
	
	/**
	 * Update component
	 */
	void onUpdate(Collection<string> model_path, Dict params, var content)
	{
		
	}
	
	#endif
	
	
	/**
	 * Returns css
	 */
	static string getCss(Collection<string> class_names, Dict css_vars = null)
	{
		if (css_vars == null) css_vars = {};
		
		/* Get required components */
		Collection<string> components = static::getRequiredComponents(class_names);
		components = components.filter(lib::equalNot("")).removeDuplicatesIm();
		
		/* Get css */
		Collection<string> css = components.map
		(
			string (string component_name) use (css_vars)
			{
				if (component_name == "") return "";
				if (not rtl::method_exists(component_name, "css")) return "";
				fn f = rtl::method(component_name, "css");
				string css = f(css_vars);
				return css;
			}
		);
		
		return rs::join("\n", css);
	}
	
	
	/**
	 * Returns required modules
	 * @param string class_name
	 * @return Collection<string>
	 */
	static void _getRequiredComponents
	(
		Vector<string> res,
		Map<string> cache,
		Collection<string> components
	)
	{
		if (components == null)
			return;
		
		for (int i=0; i<components.count(); i++)
		{
			string class_name = components.item(i);
			if (cache.get(class_name, false) == false)
			{
				cache.setValue(class_name, true);
				if (rtl::method_exists(class_name, "components"))
				{
					fn f = rtl::method(class_name, "components");
					Dict<string> sub_components = f();
					if (sub_components != null)
					{
						static::_getRequiredComponents(res, cache, sub_components);
					}
				}
				res.pushValue(class_name);
			}
		}
	}
	
	
	/**
	 * Returns all components
	 * @param Collection<string> components
	 * @return Collection<string>
	 */
	pure Collection<string> getRequiredComponents(Collection<string> components)
	{
		components = components.filter(lib::equalNot("")).removeDuplicatesIm();
		Vector<string> res = new Vector();
		Map<string> cache = new Map();
		static::_getRequiredComponents(res, cache, components);
		res = res.removeDuplicatesIm();
		return res.toCollection();
	}
	
	
	/**
	 * Retuns css hash
	 * @param string component class name
	 * @return string hash
	 */
	static memorize string hash(string s)
	{
		string r = "";
		string a = "1234567890abcdef";
		int sz = rs::strlen(s);
		int h = 0;
		for (int i=0; i<sz; i++)
		{
			int c = rs::ord( rs::substr(s, i, 1) );
			h = ((h << 2) + (h >> 14) + c) & 65535;
		}
		int p = 0;
		while (h != 0 or p < 4)
		{
			int c = h & 15;
			h = h >> 4;
			r ~= rs::substr(a, c, 1);
			p = p + 1;
		}
		return r;
	}
	
	
	/**
	 * Returns css hash
	 */
	pure memorize string getCssHash() =>
		rtl::getParents(static::getClassName())
			|> .filter
			(
				bool (string class_name) =>
					class_name != "Runtime.BaseObject" and
					class_name != "Runtime.Web.Component"
			)
			|> .map
			(
				string (string class_name) => "h-" ~ static::hash(class_name)
			)
			|> lib::join(" ")
		;
	
	
	/**
	 * Escape html
	 */
	pure string _escape_html(var s)
	{
		#switch
		#case ifcode PHP then
		if (gettype($s) == "array") return $s;
		if ($s instanceof \Runtime\RawString) return $s;
		#endswitch
		if (rtl::isString(s)) return rs::escapeHtml(s);
		if (s instanceof Collection) return rs::join("", s);
		return rs::escapeHtml( rtl::toString(s) );
	}
	
	
	/**
	 * To html
	 */
	pure string _to_html(var s)
	{
		return s;
	}
	
	
	/**
	 * Concat attr
	 */
	pure Dict _concat_attrs(Dict arr1, var arr2)
	{
		if (rtl::isString(arr2)) arr2 = [ arr2 ];
		return arr1.concat(arr2);
	}
	
	
	/**
	 * Merge attrs
	 */
	pure Dict _merge_attrs(Dict res, Dict attr2)
	{
		if (not rtl::exists(attr2)) return res;
		#ifcode JAVASCRIPT then
		return Object.assign(res, attr2.toObject());
		#endif
		return res;
	}
	
	
	/**
	 * Join attrs to string
	 */
	pure string _join_attrs(Dict attrs) =>
		rtl::exists(attrs) ?
			rs::join
			(
				" ",
				attrs.map(
					string (string k, string v) => k ~ "= '" ~ static::_escape_attr(v) ~ "'"
				)
			) : ""
	;
	
	
	/**
	 * Escape attr
	 */
	pure string _escape_attr(var s)
	{
		if (s instanceof Dict)
		{
			s = s.reduce
			(
				string (string s, string val, string key) => s ~ key ~ ":" ~ val ~ ";",
				""
			);
		}
		return rs::escapeHtml(s);
	}
	
	
	#ifcode PHP then
	static function _p(&$arr1, $s)
	{
		if (gettype($s) == "string" || $s instanceof \Runtime\RawString)
		{
			$arr1[] = $s;
		}
		if (gettype($s) == "array")
		{
			foreach ($s as $v) $arr1[] = $v;
		}
	}
	#endif
	
}
