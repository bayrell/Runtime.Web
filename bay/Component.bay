/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseStruct;
use Runtime.RuntimeUtils;
use Runtime.Core.CoreEvent;
use Runtime.Core.CoreObject;
use Runtime.Core.Message;
use Runtime.Web.LayoutModel;
use Runtime.Web.RenderController;
use Runtime.Web.RenderDriver;
use Runtime.Web.Events.UIEvent;


class Component extends CoreObject
{
	protected string path_id = "";
	protected RenderController controller = null;
	protected Dict params = null;
	protected Collection<string> model_path = [];
	
	
	/**
	 * Component get path
	 */
	string getPath() => this.path_id;
	
	
	
	/**
	 * Returns model path
	 */
	public Collection<string> getModelPath() => this.model_path;
	
	
	
	/**
	 * Set new component's model
	 */
	public void setModelPath(Collection<string> model_path)
	{
		this.model_path = model_path;
	}
	
	
	
	/**
	 * Returns component params
	 */
	public Dict getParams() => this.params;
	
	
	
	/**
	 * Set new params
	 */
	public void setParams(Dict params)
	{
		this.params = params;
	}
	
	
	
	/**
	 * Returns model
	 */
	var model(Collection<string> model_path = null, var def_val = null) =>
		this.model_path == null ? null :
			rtl::attr(this.controller.layout, this.model_path.concat(model_path), def_val)
	;
	
	
	
	/**
	 * Commit model
	 */
	void commit(string method_name = "")
	{
		var args = new Vector();
		#ifcode JAVASCRIPT then
		for (var i=2; i<arguments.length; i++) args.push(ctx, arguments[i]);
		#endif
		
		/* Get current model */
		BaseStruct model = this.model();
		args.unshift(model);
		
		/* Change model by function */
		fn f = rtl::method(model.getClassName(), method_name);
		model = rtl::apply(f, args);
		
		/* Set new model */
		this.controller.updateModel(this.model_path, model);
	}
	
	
	
	/**
	 * Constructor
	 */
	void constructor(string object_name, string path_id, RenderController controller)
	{
		parent(object_name);
		this.path_id = path_id;
		this.controller = controller;
	}
	
	
	
	/**
	 * Handle message
	 */
	public async void handleMessage(Message msg)
	{
		if (msg.getObjectName() == this.getObjectName())
		{
			if (msg.data instanceof CoreEvent)
			{
				CoreEvent event = msg.data;
				string callback = this.controller.findCallback(this.getObjectName(), msg.from, event.getClassName());
				if (callback != "" and rtl::method_exists(this, callback))
				{
					fn f = rtl::method(this, callback);
					await f(msg);
				}
			}
		}
	}
	
	
	
	/**
	 * Component css
	 */
	pure string css(Dict<string> vars) => "";
	
	
	
	/**
	 * Component render
	 */
	pure html render(LayoutModel layout, BaseStruct model, Dict params, html content) => null;
	
	
	
	/**
	 * Returns css name
	 */
	pure string getCssName(string css_name)
	{
		string class_name = static::getCurrentClassName();
		return RenderDriver::getCssName(class_name, css_name);
	}
	
	
	
	/**
	 * Escape attr
	 */
	pure string escapeAttr(string s)
	{
		return rs::escapeHtml(s);
	}
	
	
	
	/**
	 * Escape html
	 */
	pure string escapeHtml(var s)
	{
		#switch
		#case ifcode PHP then
		if ($s instanceof \Runtime\RawString) return $s->toString();
		#endswitch
		if (rtl::isString(s)) return rs::escapeHtml(s);
		if (s instanceof Collection) return rs::join("", s);
		return rs::escapeHtml( rtl::toString(s) );
	}
	
	
	
	/**
	 * Json encode
	 */
	pure string json_encode(var obj)
	{
		return RuntimeUtils::json_encode(obj);
	}
	
	
	
	/**
	 * To html
	 */
	pure string toHtml(var s)
	{
		if (rtl::isString(s)) return s;
		if (s instanceof Collection) return rs::join("", s);
		return rtl::toString(s);
	}
	
}