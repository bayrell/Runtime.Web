/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseObject;
use Runtime.BaseStruct;
use Runtime.Web.Events.BaseEvent;
use Runtime.Web.Events.ChangeEvent;
use Runtime.Web.Events.SignalEvent;
use Runtime.Web.ListenerCallback;
use Runtime.Web.Message;
use Runtime.Web.RenderController;
use Runtime.Web.RenderDriver;
use Runtime.Web.VirtualDom;


class Component extends BaseObject
{
	RenderDriver driver = null;
	RenderController controller = null;
	Collection model_path = null;
	primitive old_model = null;
	primitive new_model = null;
	VirtualDom vdom = null;
	Vector<Component> childs = new Vector();
	Dict params = null;
	Dict old_params = null;
	Dict old_watch_model = null;
	Dict new_watch_model = null;
	bool is_new = false;
	
	
	
	/**
	 * Returns path id
	 */
	string getPathId() => rs::join(":", this.vdom.path_id);
	
	
	
	/**
	 * Returns model
	 */
	var model(Collection<string> model_path = null, var def_val = null) =>
		this.model_path == null ? null :
			rtl::attr
			(
				this.driver.layout,
				this.model_path.concat
				(
					(rtl::isEmpty(model_path)) ? null :
					(model_path instanceof Collection) ? model_path : [ model_path ]
				),
				def_val
			)
	;
	
	
	
	/**
	 * Update model
	 */
	void update(string method_name = "")
	{
		var args = new Vector();
		#ifcode JAVASCRIPT then
		for (var i=((typeof ctx == "undefined") ? 1 : 2); i<arguments.length; i++) args.pushValue(ctx, arguments[i]);
		#endif
		
		/* Get current model */
		BaseStruct model = this.model();
		
		/* Update model */
		model = static::updateModel(model, method_name, args.toCollection());
		
		/* Set new model */
		this.driver.updateModel(this.model_path, model);
	}
	
	
	
	/**
	 * Update model
	 */
	pure primitive updateModel(primitive model, string method_name = "", Collection args = null)
	{
		/* Change model by function */
		if (rtl::method_exists(model, method_name))
		{
			fn f = rtl::method(model, method_name);
			model = rtl::apply(f, args);
		}
		
		/* Static function */
		if (rtl::method_exists(model.getClassName(), method_name))
		{
			args = args.unshiftIm(model);
			fn f = rtl::method(model.getClassName(), method_name);
			model = rtl::apply(f, args);
		}
		
		return model;
	}
	
	
	
	/**
	 * Set Virtual DOM
	 */
	void setVirtualDom(VirtualDom vdom)
	{
		/* Update model path */
		this.updateModelPath(vdom);
		
		/* Update parent */
		/*this.updateParent(vdom);*/
		
		/* Update parent */
		this.updateParams(vdom);
		
		/* Set new vdom */
		vdom.instance = this;
		this.vdom = vdom;
	}
	
	
	
	/**
	 * Update model path
	 */
	protected void updateModelPath(VirtualDom vdom)
	{
		/* Model path */
		Collection model_path = [];
		
		/* Find model */
		Collection params_keys = ["@bind", "@name", "@model"];
		if (vdom.params != null)
		{
			for (int params_keys_i=0; params_keys_i<params_keys.count(); params_keys_i++)
			{
				string key = params_keys[params_keys_i];
				if (vdom.params.has(key))
				{
					model_path = this.controller.findModelPath(vdom, vdom.params[key]);
					break;
				}
			}
		}
		
		/* Set model */
		this.old_model = this.new_model;
		this.new_model = this.driver.model(model_path);
		this.model_path = model_path;
	}
	
	
	
	/**
	 * Update component params
	 */
	protected void updateParams(VirtualDom vdom)
	{
		this.old_params = this.params;
		this.params = vdom.params.setIm("@path_id", vdom.path_id);
	}
	
	
	
	/**
	 * Extend component model
	 */
	pure BaseStruct extendComponentModel(BaseStruct layout, Collection model_path, Dict params) => layout;
	
	
	
	/**
	 * Render function
	 */
	pure void render(BaseStruct layout, Collection model_path, Dict params, html content) => null;
	
	
	
	/**
	 * Extended render function
	 */
	pure void render2(BaseStruct layout, Collection model_path, Dict params, html content)
	{
		layout = static::extendComponentModel(layout, model_path, params);
		return static::render(layout, model_path, params, content);
	}
	
	
	
	/**
	 * Call render component
	 */
	void renderComponent()
	{
		this.driver.layout = static::extendComponentModel(this.driver.layout, this.model_path, this.params);
		if (this.isRender())
		{
			fn f = static::render
			(
				this.driver.layout, this.model_path,
				this.params, this.vdom.content
			);
			if (f != null) f(this.vdom);
		}
	}
	
	
	
	/**
	 * Returns true if need to render component
	 */
	bool isRender()
	{
		if (this.is_new)
		{
			return true;
		}
		/* Check component model */
		if (this.new_model != this.old_model)
		{
			return true;
		}
		/* Check component params */
		if (not this.equalParams())
		{
			return true;
		}
		/* Check watch model */
		if (this.isRepaintWatch())
		{
			return true;
		}
		return false;
	}
	
	
	
	/**
	 * Watch model
	 */
	void watchModel(Collection path_id, var watch)
	{
		string class_name = watch |> attr 0 |> default string [];
		var watch = watch[1];
		if (not (watch instanceof Collection)) watch = [ watch ];
		
		this.new_watch_model = new Map();
		for (int i=0; i<watch.count(); i++)
		{
			var item = watch[i];
			Collection model_path = this.controller.findModelPath(path_id, [class_name, item]);
			string key = rs::join(".", model_path);
			this.new_watch_model.setValue(key, this.driver.model(model_path));
		}
		this.new_watch_model = this.new_watch_model.toDict();
	}
	
	
	
	/**
	 * Returns true if need to repaint component
	 */
	bool isRepaintWatch()
	{
		if (this.old_watch_model != null)
		{
			Collection keys = this.old_watch_model.keys();
			for (int i=0; i<keys.count(); i++)
			{
				string key = keys[i];
				Collection model_path = rs::split("\\.", key);
				var old_model = this.old_watch_model[key];
				var new_model = this.driver.model(model_path);
				if (new_model != old_model)
				{
					return true;
				}
			}
		}
		return false;
	}
	
	
	
	/**
	 * Equal old and new params
	 */
	bool equalParams()
	{
		var arr = new Collection().concat(this.old_params.keys()).concat(this.params.keys()).removeDuplicatesIm();
		for (int i=0; i<arr.count(); i++)
		{
			string field_name = arr[i];
			if (not this.old_params.has(field_name)) return false;
			if (not this.params.has(field_name)) return false;
			if (this.params.get(field_name) != this.old_params.get(field_name)) return false;
		}
		return true;
	}
	
	
	
	/**
	 * Call repaint all
	 */
	void repaint()
	{
		this.driver.repaint();
	}
	
	
	
	/**
	 * Call repaint component
	 */
	void repaintPartial()
	{
		this.controller.render_components.pushValue(this.vdom);
		this.driver.repaintPartial();
	}
	
	
	
	/**
	 * On create
	 */
	void onCreate()
	{
	}
	

	
	/**
	 * On update
	 */
	void onUpdate()
	{
	}
	
	
	
	/**
	 * On handle event
	 */
	async void onMessage(Message msg, ListenerCallback listener)
	{
		BaseEvent event = msg.data;
		
		if (
			listener.method_name != "onMessage" and
			listener.method_name != "onCreate" and
			listener.method_name != "onUpdate" and
			rs::substr(listener.method_name, 0, 2) == "on"
		)
		{
			if (rtl::method_exists(this, listener.method_name))
			{
				await rtl::applyMethodAsync(this, listener.method_name, [msg, listener]);
			}
		}
		
		if (msg.dest == this.getPathId() and listener.method_name != "onSignal" and event instanceof SignalEvent)
		{
			await this.onSignal(msg, listener);
		}
		
	}
	
	
	
	/**
	 * On signal
	 */
	async void onSignal(Message<SignalEvent> msg, ListenerCallback listener)
	{
	}
	
	
	
	/**
	 * Send event
	 */
	async void sendEvent(BaseEvent event, var dest = null)
	{
		string dest_path = "";
		
		if (dest == null) dest = this.getParent();
		if (
			dest != null and (
				dest instanceof Component or
				dest instanceof VirtualDom
			)
		)
		{
			dest_path = dest.getPathId();
		}
		
		await this.driver.sendEvent(event, this.vdom, dest_path);
	}
	
	
	
	/**
	 * Get parent component
	 */
	Component getParent() => this.vdom.getParentComponent();
	Component getParentComponent() => this.vdom.getParentComponent();
	
	
	
	/* Old */
	

	Map events = new Map();
	bool is_new_element = false;
	
	
	/**
	 * Add component
	 */
	void addComponentOld(Component c)
	{
		int pos = this.childs.indexOf(c);
		if (pos == -1)
		{
			this.childs.pushValue(c);
		}
	}

	
	/**
	 * Call model function
	 */
	void callOld(string method_name = "")
	{
		var args = new Vector();
		#ifcode JAVASCRIPT then
		for (var i=((typeof ctx == "undefined") ? 1 : 2); i<arguments.length; i++) args.pushValue(ctx, arguments[i]);
		#endif
		
		/* Result */
		var res = null;
		
		/* Get current model */
		BaseStruct model = this.model();
		
		/* Change model by function */
		if (rtl::method_exists(model, method_name))
		{
			fn f = rtl::method(model, method_name);
			res = rtl::apply(f, args);
		}
		
		/* Static function */
		if (rtl::method_exists(model.getClassName(), method_name))
		{
			args.unshiftValue(model);
			fn f = rtl::method(model.getClassName(), method_name);
			res = rtl::apply(f, args);
		}
		
		return res;
	}
	
	
	/**
	 * Set new model
	 */
	void setModelOld(var model)
	{
		this.driver.updateModel(this.model_path, model);
	}
	
	
	
	/**
	 * Add event listener
	 */
	void addEventListenerOld(string event_class_name, fn f)
	{
		this.events.setValue(event_class_name, f);
	}
	
	
	
	/**
	 * Send event
	 */
	public async void signalOld(BaseEvent event)
	{
		string event_class_name = event.getClassName();
		Collection keys = this.events.keys();
		Collection parents = rtl::getParents(event.getClassName());
		for (int i=0; i<keys.count(); i++)
		{
			string event_class_name = keys[i];
			if (parents.indexOf(event_class_name) != -1)
			{
				fn f = this.events[event_class_name];
				Message msg = new Message(event);
				msg.sender = this;
				await f(msg);
			}
		}
	}
	
	
	
	/**
	 * Repaint component
	 */
	void repaintOld(var element)
	{
		BaseStruct new_model = static::extendComponentModel(this.driver.layout, this.new_model, this.params);
		if (new_model != this.new_model)
		{
			this.new_model = new_model;
			this.setModel(new_model);
		}
		if (this.isRepaint())
		{
			int begin = element.childs.count();
			fn f = static::render
			(
				this.driver.layout, new_model,
				this.params, element.content
			);
			if (f != null) f(element);
			int end = element.childs.count();
			this.child_nodes = element.childs.slice(begin, end - begin).toCollection();
		}
		else
		{
			element.childs.appendVector(this.child_nodes);
		}
	}
	
	
	
	
	/* Functions for render */
	
	
	/**
	 * Returns css name
	 */
	pure string getCssHash()
	{
		string class_name = static::getCurrentClassName();
		Collection names = RenderDriver::getCssHash(class_name);
		return rs::join(" ", names);
	}
	
	
	
	/**
	 * Concat attr
	 */
	/*
	pure Dict concatAttr(Dict arr1, string key, Collection arr2) =>
		arr1
		|> lib::set(key, arr1[key] |> .concat(arr2) )
		|> default Dict arr1
	;
	*/
	
	
	/**
	 * Concat attr
	 */
	pure Dict concatAttr(Dict arr1, string key, Collection arr2)
	{
		Collection res = arr1[key];
		if (rtl::isString(arr2)) arr2 = [ arr2 ];
		if (res != null) res = res.toCollection().concat(arr2);
		else res = arr2;
		return res;
	}
	
	
	
	/**
	 * Merge attrs
	 */
	pure Dict mergeAttrs(Dict res, Dict attr2)
	{
		if (not rtl::exists(attr2)) return res;
		#ifcode JAVASCRIPT then
		return Object.assign(res, attr2.toObject());
		#endif
		return res;
	}
	
	
	
	/**
	 * Join attrs to string
	 */
	pure string joinAttrs(Dict attrs) =>
		rtl::exists(attrs) ?
			rs::join
			(
				" ",
				attrs.map( string (string k, string v) => k ~ "= '" ~ static::escapeAttr(v) ~ "'" )
			) : ""
	;
	
	
	
	/**
	 * Escape attr
	 */
	pure string escapeAttr(var s)
	{
		if (s instanceof Dict) s = s.reduce
		(
			string (string s, string val, string key) => s ~ key ~ ":" ~ val ~ ";",
			""
		);
		return rs::escapeHtml(s);
	}
	
	
	
	/**
	 * Escape html
	 */
	pure string escapeHtml(var s)
	{
		#switch
		#case ifcode PHP then
		if (gettype($s) == "array") return $s;
		if ($s instanceof \Runtime\RawString) return $s;
		#endswitch
		if (rtl::isString(s)) return rs::escapeHtml(s);
		if (s instanceof Collection) return rs::join("", s);
		return rs::escapeHtml( rtl::toString(s) );
	}
	
	
	
	/**
	 * Json encode
	 */
	pure string json_encode(var obj)
	{
		return rtl::json_encode(obj);
	}
	
	
	
	#ifcode PHP then
	static function p(&$arr1, $s)
	{
		if (gettype($s) == "string" || $s instanceof \Runtime\RawString)
		{
			$arr1[] = $s;
		}
		if (gettype($s) == "array")
		{
			foreach ($s as $v) $arr1[] = $v;
		}
	}
	#endif
} 
