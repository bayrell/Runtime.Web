/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseObject;
use Runtime.BaseStruct;
use Runtime.Web.Events.BaseEvent;
use Runtime.Web.Controller;
use Runtime.Web.Element;
use Runtime.Web.Message;
use Runtime.Web.RenderDriver;


class Component extends BaseObject
{
	RenderDriver driver = null;
	Controller controller = null;
	Map old_params = null;
	Map params = null;
	var old_model = null;
	var new_model = null;
	Collection child_nodes = null;
	Collection model_path = null;
	Collection path_id = null;
	
	
	/**
	 * Returns model
	 */
	var model(Collection<string> model_path = null, var def_val = null) =>
		this.model_path == null ? null :
			rtl::attr
			(
				this.driver.layout,
				this.model_path.concat
				(
					(rtl::isEmpty(model_path)) ? null :
					(model_path instanceof Collection) ? model_path : [ model_path ]
				),
				def_val
			)
	;
	
	
	
	/**
	 * Call model function
	 */
	void call(string method_name = "")
	{
		var args = new Vector();
		#ifcode JAVASCRIPT then
		for (var i=((typeof ctx == "undefined") ? 1 : 2); i<arguments.length; i++) args.pushValue(ctx, arguments[i]);
		#endif
		
		/* Result */
		var res = null;
		
		/* Get current model */
		BaseStruct model = this.model();
		
		/* Change model by function */
		if (rtl::method_exists(model, method_name))
		{
			fn f = rtl::method(model, method_name);
			res = rtl::apply(f, args);
		}
		
		/* Static function */
		if (rtl::method_exists(model.getClassName(), method_name))
		{
			args.unshiftValue(model);
			fn f = rtl::method(model.getClassName(), method_name);
			res = rtl::apply(f, args);
		}
		
		return res;
	}
	
	
	/**
	 * Update model
	 */
	void update(string method_name = "")
	{
		#ifcode JAVASCRIPT then
		this.updateModel.apply(this, arguments);
		#endif
	}
	
	
	
	/**
	 * Update model
	 */
	void updateModel(string method_name = "")
	{
		var args = new Vector();
		#ifcode JAVASCRIPT then
		for (var i=((typeof ctx == "undefined") ? 1 : 2); i<arguments.length; i++) args.pushValue(ctx, arguments[i]);
		#endif
		
		/* Get current model */
		BaseStruct model = this.model();
		
		/* Change model by function */
		if (rtl::method_exists(model, method_name))
		{
			fn f = rtl::method(model, method_name);
			model = rtl::apply(f, args);
		}
		
		/* Static function */
		if (rtl::method_exists(model.getClassName(), method_name))
		{
			args.unshiftValue(model);
			fn f = rtl::method(model.getClassName(), method_name);
			model = rtl::apply(f, args);
		}
		
		/* Set new model */
		this.driver.updateModel(this.model_path, model);
	}
	
	
	
	/**
	 * Set new model
	 */
	void setModel(var model)
	{
		this.driver.updateModel(this.model_path, model);
	}
	
	
	/**
	 * On create
	 */
	void onCreate()
	{
	}
	

	
	/**
	 * On update
	 */
	void onUpdate()
	{
	}
	
	
	
	/**
	 * Returns true if need to repaint component
	 */
	bool isRepaint()
	{
		return this.new_model != this.old_model;
	}
	
	
	
	/**
	 * Repaint component
	 */
	void repaint(Element element)
	{
		if (this.isRepaint())
		{
			int begin = element.childs.count();
			fn f = static::render
			(
				element.driver.layout, this.new_model,
				this.params, element.content
			);
			if (f != null) f(element);
			int end = element.childs.count();
			this.child_nodes = element.childs.slice(begin, end - begin).toCollection();
		}
		else
		{
			element.childs.appendVector(this.child_nodes);
		}
	}
	
	
	
	/**
	 * Render function
	 */
	pure void render(BaseStruct layout, BaseStruct model, Dict params, html content) => null;
	
	
	
	/**
	 * Returns css name
	 */
	pure string getCssHash()
	{
		string class_name = static::getCurrentClassName();
		return RenderDriver::getCssHash(class_name);
	}
} 
