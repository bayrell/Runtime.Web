/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseObject;
use Runtime.BaseStruct;
use Runtime.Web.Events.BaseEvent;
use Runtime.Web.Controller;
use Runtime.Web.Element;
use Runtime.Web.Message;
use Runtime.Web.RenderDriver;
use Runtime.Web.WebApp;


class Component extends BaseObject
{
	RenderDriver driver = null;
	Controller controller = null;
	Map old_params = null;
	Map params = null;
	Dict old_watch_model = null;
	Dict new_watch_model = null;
	var old_model = null;
	var new_model = null;
	Collection child_nodes = null;
	Collection model_path = null;
	Collection path_id = null;
	Map events = new Map();
	bool is_new_element = false;
	
	
	/**
	 * Returns model
	 */
	var model(Collection<string> model_path = null, var def_val = null) =>
		this.model_path == null ? null :
			rtl::attr
			(
				this.driver.layout,
				this.model_path.concat
				(
					(rtl::isEmpty(model_path)) ? null :
					(model_path instanceof Collection) ? model_path : [ model_path ]
				),
				def_val
			)
	;
	
	
	
	/**
	 * Call model function
	 */
	void call(string method_name = "")
	{
		var args = new Vector();
		#ifcode JAVASCRIPT then
		for (var i=((typeof ctx == "undefined") ? 1 : 2); i<arguments.length; i++) args.pushValue(ctx, arguments[i]);
		#endif
		
		/* Result */
		var res = null;
		
		/* Get current model */
		BaseStruct model = this.model();
		
		/* Change model by function */
		if (rtl::method_exists(model, method_name))
		{
			fn f = rtl::method(model, method_name);
			res = rtl::apply(f, args);
		}
		
		/* Static function */
		if (rtl::method_exists(model.getClassName(), method_name))
		{
			args.unshiftValue(model);
			fn f = rtl::method(model.getClassName(), method_name);
			res = rtl::apply(f, args);
		}
		
		return res;
	}
	
	
	/**
	 * Update model
	 */
	void update(string method_name = "")
	{
		#ifcode JAVASCRIPT then
		this.updateModel.apply(this, arguments);
		#endif
	}
	
	
	
	/**
	 * Update model
	 */
	void updateModel(string method_name = "")
	{
		var args = new Vector();
		#ifcode JAVASCRIPT then
		for (var i=((typeof ctx == "undefined") ? 1 : 2); i<arguments.length; i++) args.pushValue(ctx, arguments[i]);
		#endif
		
		/* Get current model */
		BaseStruct model = this.model();
		
		/* Change model by function */
		if (rtl::method_exists(model, method_name))
		{
			fn f = rtl::method(model, method_name);
			model = rtl::apply(f, args);
		}
		
		/* Static function */
		if (rtl::method_exists(model.getClassName(), method_name))
		{
			args.unshiftValue(model);
			fn f = rtl::method(model.getClassName(), method_name);
			model = rtl::apply(f, args);
		}
		
		/* Set new model */
		this.driver.updateModel(this.model_path, model);
	}
	
	
	
	/**
	 * Set new model
	 */
	void setModel(var model)
	{
		this.driver.updateModel(this.model_path, model);
	}
	
	
	
	/**
	 * On create
	 */
	void onCreate()
	{
	}
	

	
	/**
	 * On update
	 */
	void onUpdate()
	{
	}
	
	
	
	/**
	 * Open url
	 */
	void openUrl(string url)
	{
		WebApp app = @.getDriver("WebApp");
		await app.openUrl(url);
	}
	
	
	
	/**
	 * Add event listener
	 */
	void addEventListener(string event_class_name, fn f)
	{
		this.events.setValue(event_class_name, f);
	}
	
	
	
	/**
	 * Send event
	 */
	public async void signal(BaseEvent event)
	{
		string event_class_name = event.getClassName();
		if (this.events.has(event_class_name))
		{
			fn f = this.events[event_class_name];
			Message msg = new Message(event);
			msg.sender = this;
			await f(msg);
		}
	}
	
	
	
	/**
	 * Watch model
	 */
	void watchModel(Collection path_id, var watch)
	{
		string class_name = watch |> attr 0 |> default string [];
		var watch = watch[1];
		if (not (watch instanceof Collection)) watch = [ watch ];
		
		this.new_watch_model = new Map();
		for (int i=0; i<watch.count(); i++)
		{
			var item = watch[i];
			Collection model_path = this.controller.findModelPath(path_id, [class_name, item]);
			string key = rs::join(".", model_path);
			this.new_watch_model.setValue(key, this.driver.model(model_path));
		}
		this.new_watch_model = this.new_watch_model.toDict();
	}
	
	
	
	/**
	 * Returns true if need to repaint component
	 */
	bool isRepaint()
	{
		if (this.is_new_element)
		{
			return true;
		}
		/* Check component model */
		if (this.new_model != this.old_model)
		{
			return true;
		}
		/* Check component params */
		if (not this.equalParams())
		{
			return true;
		}
		/* Check watch model */
		if (this.old_watch_model != null)
		{
			Collection keys = this.old_watch_model.keys();
			for (int i=0; i<keys.count(); i++)
			{
				string key = keys[i];
				Collection model_path = rs::split("\\.", key);
				var old_model = this.old_watch_model[key];
				var new_model = this.driver.model(model_path);
				if (new_model != old_model)
				{
					return true;
				}
			}
		}
		return false;
	}
	
	
	
	/**
	 * Equal old and new params
	 */
	bool equalParams()
	{
		var arr = new Collection().concat(this.old_params.keys()).concat(this.params.keys()).removeDuplicatesIm();
		for (int i=0; i<arr.count(); i++)
		{
			string field_name = arr[i];
			if (not this.old_params.has(field_name)) return false;
			if (not this.params.has(field_name)) return false;
			if (this.params.get(field_name) != this.old_params.get(field_name)) return false;
		}
		return true;
	}
	
	
	
	/**
	 * Repaint component
	 */
	void repaint(Element element)
	{
		BaseStruct new_model = static::extendComponentModel(this.driver.layout, this.new_model, this.params);
		if (new_model != this.new_model)
		{
			this.new_model = new_model;
			this.setModel(new_model);
		}
		if (this.isRepaint())
		{
			int begin = element.childs.count();
			fn f = static::render
			(
				this.driver.layout, new_model,
				this.params, element.content
			);
			if (f != null) f(element);
			int end = element.childs.count();
			this.child_nodes = element.childs.slice(begin, end - begin).toCollection();
		}
		else
		{
			element.childs.appendVector(this.child_nodes);
		}
	}
	
	
	
	/**
	 * Extend component model
	 */
	pure void extendComponentModel(BaseStruct layout, BaseStruct model, Dict params) => model;
	
	
	
	/**
	 * Render function
	 */
	pure void render(BaseStruct layout, BaseStruct model, Dict params, html content) => null;
	
	
	
	/**
	 * Render function
	 */
	pure void renderComponent(BaseStruct layout, BaseStruct model, Dict params, html content)
	{
		model = static::extendComponentModel(layout, model, params);
		return static::render(layout, model, params, content);
	}
	
	
	
	/**
	 * Returns css name
	 */
	pure string getCssHash()
	{
		string class_name = static::getCurrentClassName();
		Collection names = RenderDriver::getCssHash(class_name);
		return rs::join(" ", names);
	}
	
	
	
	/**
	 * Merge attrs
	 */
	pure Dict mergeAttrs(Dict res, Dict attr2)
	{
		if (not rtl::exists(attr2)) return res;
		#ifcode JAVASCRIPT then
		return Object.assign(res, attr2.toObject());
		#endif
		return res;
	}
	
	
	
	/**
	 * Join attrs to string
	 */
	pure string joinAttrs(Dict attrs) =>
		rtl::exists(attrs) ?
			rs::join
			(
				" ",
				attrs.map( string (string k, string v) => k ~ "= '" ~ static::escapeAttr(v) ~ "'" )
			) : ""
	;
	
	
	
	/**
	 * Escape attr
	 */
	pure string escapeAttr(var s)
	{
		if (s instanceof Dict) s = s.reduce
		(
			string (string s, string val, string key) => s ~ key ~ ":" ~ val ~ ";",
			""
		);
		return rs::escapeHtml(s);
	}
	
	
	
	/**
	 * Escape html
	 */
	pure string escapeHtml(var s)
	{
		#switch
		#case ifcode PHP then
		if (gettype($s) == "array") return $s;
		if ($s instanceof \Runtime\RawString) return $s;
		#endswitch
		if (rtl::isString(s)) return rs::escapeHtml(s);
		if (s instanceof Collection) return rs::join("", s);
		return rs::escapeHtml( rtl::toString(s) );
	}
	
	
	
	/**
	 * Json encode
	 */
	pure string json_encode(var obj)
	{
		return rtl::json_encode(obj);
	}
	
	
	
	#ifcode PHP then
	static function p(&$arr1, $s)
	{
		if (gettype($s) == "string" || $s instanceof \Runtime\RawString)
		{
			$arr1[] = $s;
		}
		if (gettype($s) == "array")
		{
			foreach ($s as $v) $arr1[] = $v;
		}
	}
	#endif
} 
