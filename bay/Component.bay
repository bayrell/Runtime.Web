/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.lib;
use Runtime.BaseObject;
use Runtime.BaseStruct;
use Runtime.ModelProxy;
use Runtime.Exceptions.FileNotFound;
use Runtime.Web.AppHook;
use Runtime.Web.Listener;
use Runtime.Web.Message;
use Runtime.Web.RenderProvider;
use Runtime.Web.RouteList;
use Runtime.Web.VirtualDom;
use Runtime.Web.Events.BaseEvent;
use Runtime.Web.Events.CommitModelEvent;


class Component extends BaseObject
{
	RenderProvider provider = null;
	Collection model_path = [];
	var old_model = null;
	var params = null;
	var content = null;
	var vdom = null;
	
	
	/**
	 * Returns layout
	 */
	var layout(Collection<string> path = null)
	{
		if (path == null) return this.provider.layout;
		return rtl::attr(this.provider.layout, path);
	}
	
	
	/**
	 * Returns model by model path
	 */
	var model(Collection<string> model_path = null)
	{
		if (this.model_path == null) return null;
		if (model_path == null) model_path = [];
		var layout = this.layout();
		return rtl::attr(layout, this.model_path.concat(model_path));
	}
	
	
	/**
	 * Returns page model proxy
	 */
	ModelProxy modelProxy(Collection path = null)
	{
		Collection model_path = ["layout"];
		model_path = model_path.concat( this.model_path );
		model_path = model_path.concat( path );
		return new ModelProxy(this.provider, model_path);
	}
	ModelProxy proxy(Collection path = null) => this.modelProxy(path);
	
	
	/**
	 * Returns parent widget
	 */
	ModelProxy proxyParentWidget()
	{
		Collection widget_path = this.model().widget_path.removeLastIm();
		Collection model_path = this.provider.layout.getWidgetGlobalPath(widget_path);
		return new ModelProxy(this.provider, ["layout"].concat(model_path));
	}
	
	
	/**
	 * Returns url
	 */
	static string url(string route_name, Dict route_params = null)
	{
		RouteList routes = @.provider(classof RouteList);
		return routes.url(route_name, route_params);
	}
	
	
	#ifdef FRONTEND then
	
	/**
	 * Set reference
	 */
	void setRef(string ref_name, VirtualDom vdom)
	{
		this[ref_name] = vdom;
	}
	
	
	/**
	 * Returns true if component is changed and need to repaint
	 */
	bool isChanged(var model, Dict params, var content)
	{
		if (this.old_model != model) return true;
		return VirtualDom::isChangedParams(this.params, params) or this.content != content;
	}
	
	
	/**
	 * If component needs render
	 */
	bool isRender()
	{
		return true;
	}
	
	
	/**
	 * Update params
	 */
	void updateParams(Collection model_path, Dict params, var content)
	{
		this.model_path = model_path;
		this.params = params;
		this.content = content;
		
		RenderProvider provider = @.provider(classof RenderProvider);
		this.old_model = provider.model(model_path);
	}
	
	
	/**
	 * Create component
	 */
	void onCreate()
	{
	}
	
	
	/**
	 * Destroy component
	 */
	void onDestroy()
	{
	}
	
	
	/**
	 * Update component
	 */
	void onUpdate()
	{
	}
	
	
	/**
	 * Render component
	 */
	void onRender()
	{
	}
	
	
	/**
	 * Update elem event
	 */
	void onUpdateElem()
	{
	}
	
	
	/**
	 * Repaint component
	 */
	void onRepaint()
	{
	}
	
	
	/**
	 * On commit model message
	 */
	void onCommitModel(Message<CommitModelEvent> message)
	{
	}
	
	
	/**
	 * Commit
	 */
	void commit(string method_name)
	{
		Collection<string> args = null;
		
		#ifcode ES6 then
		args = Runtime.Collection.from( [ ...arguments ].slice(1) );
		#endif
		
		/* Commit model */
		args = args.prependIm(method_name);
		rtl::applyMethod(this.modelProxy(), "commit", args);
	}
	
	
	/**
	 * Commit async
	 */
	async var commitAsync(string method_name)
	{
		Collection<string> args = null;
		
		#ifcode ES6 then
		args = Runtime.Collection.from( [ ...arguments ].slice(1) );
		#endif
		
		/* Commit model */
		args = args.prependIm(method_name);
		return await rtl::methodApplyAsync(this.modelProxy(), "commitAsync", args);
	}
	
	
	/**
	 * Repaint Virtual Dom
	 */
	void repaintRef(var ref)
	{
		RenderProvider provider = @.provider(classof RenderProvider);
		provider.repaintRef(ref);
	}
	
	
	/**
	 * Add function to next render before paint
	 */
	void nextRenderBefore(fn f)
	{
		RenderProvider provider = @.provider(classof RenderProvider);
		provider.nextRenderBefore(f);
	}


	/**
	 * Add function to next render after paint
	 */
	void nextRenderAfter(fn f)
	{
		RenderProvider provider = @.provider(classof RenderProvider);
		provider.nextRenderAfter(f);
	}
	
	
	/**
	 * Repaint component
	 */
	void repaint()
	{
		RenderProvider provider = @.provider(classof RenderProvider);
		provider.repaintRef(this.vdom);
	}
	
	
	/**
	 * Send event
	 */
	void sendEvent(BaseEvent event)
	{
		Listener listener = @.provider(classof Listener);
		
		Message msg = new Message(event);
		msg.sender = this.vdom;
		
		listener.dispatch(msg);
	}
	
	#endif
	
}
