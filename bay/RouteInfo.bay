/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.re;
use Runtime.BaseStruct;
use Runtime.Callback;


struct RouteInfo extends BaseStruct
{
	string name = "";
	string uri = "";
	string uri_match = "";
	string domain = "";
	string model = "";
	string action = "";
	Dict data = null;
	Collection<Callback> middleware = [];
	Collection<string> params = [];
	Dict<string> matches = {};
	bool is_backend = false;
	bool enable_locale = true;
	int pos = 100;
	
	
	/**
	 * Init struct data
	 */
	protected void _changes(Map changes)
	{
		if (changes.has("uri") and not changes.has("uri_match"))
		{
			string uri = changes["uri"];
			string uri_match = changes["uri_match"];
			
			uri_match = re::replace("\\/", "\\/", uri);
			
			Collection matches = re::matchAll("{(.*?)}", uri);
			if (matches)
			{
				Vector<string> params = new Vector();
				
				for (int i=0; i<matches.count(); i++)
				{
					Collection arr = matches[i];
					string name = arr[1];
					uri_match = re::replace
					(
						"{" ~ name ~ "}", 
						"([^\\/]*?)", 
						uri_match
					);
					params.push(name);
				}
				
				/* Setup params */
				changes.set("params", params.toCollection());
			}
			else
			{
				changes.set("params", []);
			}
			
			changes.set("uri_match", "^" ~ uri_match ~ "$");
		}
	}
	
	
	/**
	 * Add matches
	 */
	RouteInfo addMatches(Collection matches)
	{
		Map new_matches = {};
		for (int i=0; i<this.params.count(); i++)
		{
			string param_name = this.params.get(i);
			string match_value = matches.get(i);
			new_matches.set(param_name, match_value);
		}
		return this.clone{
			"matches": new_matches,
		};
	}
}