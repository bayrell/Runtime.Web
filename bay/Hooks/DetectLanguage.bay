/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.Hooks;

use Runtime.re;
use Runtime.lib;
use Runtime.Web.BaseLayoutModel;
use Runtime.Web.RedirectResponse;
use Runtime.Web.RenderContainer;
use Runtime.Web.Request;
use Runtime.Web.RouteInfo;
use Runtime.Web.Hooks.AppHook as BaseAppHook;


class DetectLanguage extends BaseAppHook
{
	string default_language = "";
	Vector<string> allowed_languages = [];


	/**
	 * Setup
	 */
	void setup(Dict params)
	{
		parent(params);
		
		if (params == null) return;
		if (params.has("allowed_languages")) this.allowed_languages = params.get("allowed_languages");
		if (params.has("default_language")) this.default_language = params.get("default_language");
	}


	/**
	 * Register hooks
	 */
	void register_hooks()
	{
		this.register(static::MAKE_URL);
		
		#ifdef BACKEND then
		this.register(static::FIND_ROUTE_BEFORE);
		this.register(static::MATCH_ROUTE);
		this.register(static::ROUTE_BEFORE);
		#endif
	}
	
	
	#ifdef BACKEND then
	
	
	/**
	 * Redirect
	 */
	void redirect(Map params)
	{
		RenderContainer container = params.get("container");
		if (container.response) return;
		
		/* Detect language */
		Request request = container.request;
		Dict res = this.getLanguage(request);
		
		string language = res.get("lang");
		string uri = res.get("uri");
		
		if (uri == "")
		{
			container.response = new RedirectResponse("/" ~ language ~ "/");
		}
	}
	
	
	/**
	 * Returns language
	 */
	void getLanguage(Request request)
	{
		string lang = "";
		string uri = request.uri;
		
		Vector arr = rs::split("/", request.uri)
			.filter(lib::equalNot(""))
		;
		if (arr.count() > 0)
		{
			lang = arr.get(0);
			uri = rs::substr(request.uri, rs::strlen(lang) + 1);
		}
		else
		{
			uri = "/";
		}
		
		return {
			"lang": lang,
			"uri": uri,
		};
	}
	
	
	/**
	 * Redirect
	 */
	void find_route_before(Map params)
	{
		RenderContainer container = params.get("container");
		Request request = container.request;
		
		/* Detect language */
		Dict res = this.getLanguage(request);
		string wrong_language = false;
		string language = res.get("lang");
		string uri = res.get("uri");
		
		/* Check if language is correct */
		if (this.allowed_languages.indexOf(language) == -1) wrong_language = true;
		
		/* Set detected language */
		container.layout.backend_storage.set("detect_language", {
			"lang": language,
			"wrong": wrong_language,
			"uri": uri,
		});
		
		/* Setup language */
		if (not wrong_language)
		{
			container.layout.lang = language;
		}
		else
		{
			container.layout.lang = this.default_language;
		}
	}
	
	
	/**
	 * Match route
	 */
	void match_route(Map params)
	{
		RenderContainer container = params.get("container");
		RouteInfo route = params.get("route");
		
		/* If enable locale */
		if (not route.enable_locale) return;
		
		/* Get detected language */
		Map detect_language = container.layout.backend_storage.get("detect_language");
		bool wrong_language = detect_language.get("wrong");
		string language = detect_language.get("lang");
		string uri = detect_language.get("uri");
		
		/* Clear matches */
		params.set("matches", null);
		
		/* Check if language is correct */
		if (wrong_language) return;
		
		/* Get matches */
		Vector<string> matches = re::matchAll(route.uri_match, uri);
		if (matches)
		{
			matches = matches.get(0, null);
			matches.remove(0);
			
			/* Set result */
			params.set("matches", matches);
			
			/* Set current language */
			container.layout.lang = language;
		}
	}
	
	
	/**
	 * Route before
	 */
	void route_before(Map params)
	{
		RenderContainer container = params.get("container");
		
		/* Get detected language */
		Map detect_language = container.layout.backend_storage.get("detect_language");
		bool wrong_language = detect_language.get("wrong");
		string language = detect_language.get("lang");
		string uri = detect_language.get("uri");
		
		/* Redirect if wrong language and route not found */
		if (wrong_language and container.route == null)
		{
			string redirect_url = "/" ~ this.default_language ~ container.request.full_uri;
			container.response = new RedirectResponse(redirect_url);
		}
		
		/* Redirect if empty uri */
		else if (not wrong_language and uri == "")
		{
			string redirect_url = "/" ~ container.layout.lang ~ "/";
			container.response = new RedirectResponse(redirect_url);
		}
	}
	
	#endif
	
	
	/**
	 * Make url
	 */
	void make_url(Map params)
	{
		RouteInfo route = params.get("route");
		BaseLayoutModel layout = params.get("layout");
		string domain = params.get("domain");
		string url = params.get("url");
		Dict url_params = params.get("url_params");
		string url_lang = url_params.has("lang") ? url_params.get("lang") : layout.lang;
		
		/* Add language */
		if (route.enable_locale)
		{
			url = "/" ~ url_lang ~ url;
			params.set("url", url);
			params.set("url_with_domain", url);
		}
		
		/* Add domain */
		if (domain)
		{
			params.set("url_with_domain", "//" ~ domain ~ url);
		}
	}
}