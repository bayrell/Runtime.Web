/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.Hooks;

use Runtime.re;
use Runtime.ModelProxy;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.CoreUI;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderResponse;
use Runtime.Web.Response;
use Runtime.Web.Hooks.AppHook;


class ResponseHook extends AppHook
{
	/**
	 * Register hooks
	 */
	void register_hooks()
	{
		this.register( static::RESPONSE, 9999 );
	}
	
	
	/**
	 * Response
	 */
	async Map response(Map params)
	{
		RenderContainer container = params.get("container");
		RenderResponse response = container.response;
		
		if (not (response instanceof RenderResponse)) return;
		if (response.content != null) return;
		
		/* Get class name core ui */
		Map res = @.callHook(AppHook::CORE_UI, {
			"class_name": classof CoreUI,
		});
		
		string class_name = res.get("class_name");
		if (class_name == null)
		{
			throw new RuntimeException("Class name is null");
		}
		
		/* Create component */
		CoreUI component = rtl::newInstance(class_name);
		component.container = container;
		component.model_path = [];
		
		/* Render component */
		string content = "<!doctype html>\n";
		component.render();
		/*content ~= component.render();*/
		
		/* Set result */
		response.content = content;
		
		return params;
	}
}