/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.Core.CoreDriver;
use Runtime.Web.RenderController;


class FrontendStorageDriver extends CoreDriver
{
	Map<primitive> data = null;
	Map<primitive> frontend_storage = null;
	Map<primitive> save_models = null;
	
	
	/**
	 * Start controller
	 */
	public async void startDriver()
	{
		#ifcode JAVASCRIPT then
		var storage_input = document.querySelector("#frontend_storage");
		if (storage_input)
		{
			var model = storage_input.value;
			model = Runtime.rs.base64_decode_url(ctx, model);
			model = Runtime.RuntimeUtils.json_decode(ctx, model);
			this.frontend_storage = Runtime.Map.from(model);
		}
		#endif
		
		this.data = new Map();
		this.save_models = new Map();
	}
	
	
	
	/**
	 * Save controller data
	 */
	void saveControllers()
	{
		Collection<RenderController> controllers = @.getDrivers(classof RenderController);
		for (int i=0; i<controllers.count(); i++)
		{
			RenderController controller = controllers[i];
			if (controller.isMainController())
			{
				string controller_name = controller.getObjectName()
				this.save_models.setValue(controller_name, controller.layout);
			}
		}
	}
	
	
	
	/**
	 * Returns saved controller data
	 */
	Dict loadControllerModel(string controller_name = "")
	{
		return this.save_models.get(controller_name, null);
	}
	
}