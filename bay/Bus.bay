/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseObject;
use Runtime.RouteInfo;
use Runtime.Web.ApiResult;
use Runtime.Web.RenderContainer;


class Bus
{
	
	#ifcode PHP then
	
	/**
	 * Returns curl
	 */
	static function curl($ctx, $url, $data)
	{
		$ctx = \Runtime\rtl::getContext();
		$bus_key = $ctx->env("BUS_KEY");
		
		/* Get sign */
		$time = time();
		$arr = array_keys($data); sort($arr);
		array_push($arr, $time);
		$text = implode("|", $arr);
		$sign = hash_hmac("SHA512", $text, $bus_key);
		
		/* Make curl */
		$curl = curl_init();
		curl_setopt($curl, CURLOPT_URL, $url);
		curl_setopt($curl, CURLOPT_TIMEOUT, 5);
		curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 1);
		curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 10);
		curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);
		curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
		curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'POST');
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($curl, CURLOPT_HTTPHEADER, ["Content-Type: application/json"]);
		curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode
		(
			[
				"data" => $data,
				"time" => $time,
				"sign" => $sign,
				"alg" => "sha512",
			]
		));
		
		/* Send curl */
		$out = curl_exec($curl);
		$code = curl_getinfo($curl, CURLINFO_HTTP_CODE);
		curl_close($curl);
		
		$code = (int)$code;
		
		return [$code, $out];
	}
	
	
	#endif
	
	
	/**
	 * Remote call
	 */
	async static ApiResult remoteCall(string class_name, string method_name, Dict data)
	{
		return await Bus::callApi(
			"runtime.web.remote_call",
			{
				"class_name": class_name,
				"method_name": method_name,
				"data": data,
			}
		);
	}
	
	
	/**
	 * Bus call
	 */
	static ApiResult call(string url, Dict data = null)
	{
		
		#ifcode PHP then
		#endif
		
		return null;
    }
	
	
	/**
	 * Call api
	 */
	static async ApiResult callApi(string api_name, Dict api_data = null)
	{
		ApiResult res = null;
		
		if (api_data == null) api_data = {};
		
		#switch
		
		#case ifcode PHP then
		
		$context = \Runtime\rtl::getContext();
		$render_container = $context->environments->get("render_container");
		
		$arr = explode("::", $api_name);
		$api_route_name = implode(".", array_slice($arr, 0, count($arr) - 1));
		$api_method_name = implode(".", array_slice($arr, count($arr) - 1));
		
		/* Find api */
		$api = $context->entities
			->filter( \Runtime\lib::isInstance("Runtime.Web.Annotations.Api") )
			->findItem( function ($item) use ($api_route_name, $api_method_name) {
				
				if (!\Runtime\rtl::class_exists($item->name)) return false;
				
				$route_name = \Runtime\rtl::find_class($item->name);
				$api_name = call_user_func([$route_name, "getApiName"]);
				if ($api_name != $api_route_name)
				{
					return false;
				}
				
				$route_method = call_user_func_array(
					[$route_name, "getApiMethod"], [$api_method_name]
				);
				if ($route_method == "")
				{
					return false;
				}
				
				return true;
			} )
		;
		
		if (!$api)
		{
			return (new \Runtime\Web\ApiResult())
				->exception(
					new \Runtime\Exceptions\ApiException("Api '" . $api_name . "' not found")
				)
			;
		}
		
		$api_container = new \Runtime\Web\RenderContainer();
		$api_container->layout = $render_container ? $render_container->layout : null;
		$api_container->request = new \Runtime\Web\Request($ctx, \Runtime\Dict::from([
			"uri" => $api_name,
			"host" => $render_container ? $render_container->request->host : null,
			"method" => "POST",
			"payload" => $api_data,
			"cookies" => $render_container ? $render_container->request->cookies : null,
			"headers" => $render_container ? $render_container->request->headers : null,
			"start_time" => time(),
		]));
		
		$res = null;
		$route = \Runtime\rtl::newInstance($api->name);
		$route->container = $api_container;
		$route->method_name = $api_method_name;
		$route->post_data = $api_data;
		
		try
		{
			$route->onActionBefore();
			if ($route->container->response == null)
			{
				$route->container->response = new ApiResult( new \Runtime\Dict([
					"code" => -1,
					"http_code" => 500,
					"message" => "Empty response",
				]));
				
				$route_method = $route::getApiMethod($api_method_name);
				if ($route_method && method_exists($route, $route_method))
				{
					$route->action = $route_method;
					call_user_func([ $route, $route_method ]);
				}
				else
				{
					return (new \Runtime\Web\ApiResult())
						->exception(
							new \Runtime\Exceptions\ApiException("Api method '" .
								$api_name . "' not found")
						)
					;
				}
			}
			$route->onActionAfter();
			
			if (
				$api_container->response != null and
				$api_container->response instanceof \Runtime\Web\ApiResult
			)
			{
				$res = $api_container->response;
			}
			else
			{
				return (new \Runtime\Web\ApiResult())
					->exception(
						new \Runtime\Exceptions\ApiException("Api response not found")
					)
				;
			}
		}
		catch (\Exception $e)
		{
			if (
				$render_container->route->name != "runtime:web:api" &&
				$render_container->route->name != "runtime:web:api2"
			)
			{
				throw $e;
			}
			
			if ($e instanceof \Runtime\Exceptions\ApiException)
			{
				$res = (new \Runtime\Web\ApiResult())
					->fail($e)
				;
			}
			else
			{
				$res = (new \Runtime\Web\ApiResult())
					->exception($e)
				;
			}
		}
		
		#case ifcode ES6 then
		
		/* Build pos data */
		let post_data = Runtime.Dict.from({
			"api_name": api_name,
			"data": api_data ? api_data.toDict() : null,
		});
		
		/* Send post */
		let context = Runtime.rtl.getContext();
		/*let api_url = "/" + context.env("LOCALE_CODE") + "/api/" + api_name + "/";*/
		let api_url = "/api/" + api_name + "/";
		
		if (api_name == "runtime.web.remote_call")
		{
			let class_name = Runtime.rtl.attr(api_data, "class_name");
			let method_name = Runtime.rtl.attr(api_data, "method_name");
			if (class_name || method_name)
			{
				api_url += class_name + "::" + method_name + "/";
			}
		}
		
		let d = context.callHook(
			Runtime.Web.AppHook.CALL_API_BEFORE,
			Runtime.Dict.from({
				"api_url": api_url,
				"api_name": api_name,
				"post_data": post_data,
			})
		);
		
		api_url = d.get("api_url");
		post_data = d.get("post_data");
		post_data = post_data.setIm("data", Runtime.rtl.json_encode(post_data.get("data")));
		post_data = this.buildPostData(ctx, post_data);
		
		try
		{
			let xhr = await this.sendPost(ctx, api_url, post_data);
		
			res = Runtime.rtl.json_decode(xhr.responseText);
			res = new Runtime.Web.ApiResult(res);
		}
		catch (e)
		{
			if (e instanceof Runtime.Web.ApiResult)
			{
				res = e;
			}
			else if (e instanceof Runtime.Exceptions.RuntimeException)
			{
				res = (new Runtime.Web.ApiResult()).exception(e);
			}
			else
			{
				throw e;
			}
		}
		
		if (res != null && res instanceof Runtime.Web.ApiResult)
		{
			if (res.ob_content)
			{
				Runtime.io.print(res.ob_content);
			}
			if (res.error_name && res.error_file && res.error_line)
			{
				let err = "Fatal error " + res.error_name +
					" in " + res.error_file + ": " + res.error_line + "\n";
				if (res.error_trace) err += res.error_trace;
				if (err) Runtime.io.print_error(err);
			}
		}
		
		#endswitch
		
		return res;
	}
	
}



#ifcode ES6 then


Object.assign(Runtime.Web.Bus,
{
	
	/**
	 * Send post. Returns json object or null if error
	 */
	post: async function(ctx, url, data, post_data)
	{
		/* Build pos data */
		post_data = this.buildPostData(ctx, data, post_data);
		
		/* Send post */
		var xhr = await this.sendPost(ctx, url, post_data);
		return xhr.responseText;
	},
	
	
	/**
	 * Returns FormData
	 * @params data - json object
	 * @return FormData
	 */
	buildPostData: function(ctx, data, post_data)
	{
		if (post_data == undefined)
		{
			post_data = new FormData();
		}
		let keys = data.keys();
		
		/* Add data to post data */
		for (let i=0; i<keys.length; i++)
		{
			let key = keys[i];
			let val = data.get(key);
			if (val instanceof FileList)
			{
				for (let j=0; i<val.length; j++)
				{
					post_data.append(key + "[]", val.item(j), val.item(j).name);
				}
			}
			else if (val instanceof File)
			{
				post_data.append(key, val, val.name);
			}
			else
			{
				post_data.append(key, val);
			}
		}
		
		return post_data;
	},
	
	
	/**
	 * Send api request
	 * @param string class_name
	 * @param string method_name
	 * @param Map<string, mixed> data
	 * @param callback f
	 */ 
	sendPost: async function(ctx, url, post_data)
	{
		return await new Promise((resolve, reject) =>{
			try
			{
				var xhr = new XMLHttpRequest();
				xhr.open('POST', url, true);
				xhr.send(post_data);
				xhr.onreadystatechange = (function(ctx, xhr, resolve, reject) {
					return function()
					{
						if (xhr.readyState != 4) return;
						if (xhr.status == 200)
						{
							resolve(xhr);
						}
						else
						{
							var res = Runtime.rtl.json_decode(xhr.responseText);
							res = res ? new Runtime.Web.ApiResult(res) : null;
							if (res)
							{
								reject(res);
							}
							else
							{
								reject
								(
									new Runtime.Exceptions.RuntimeException
									(ctx, xhr.status + " " + xhr.statusText)
								);
							}
						}
					}
				})(ctx, xhr, resolve, reject);
			}
			catch (e)
			{
				reject(e);
			}
		});
	},
	
});

#endif