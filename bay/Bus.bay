/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseObject;
use Runtime.RouteInfo;
use Runtime.Web.ApiResult;
use Runtime.Web.RenderContainer;


class Bus
{
	
	#ifcode PHP then
	
	/**
	 * Returns curl
	 */
	static function curl($ctx, $url, $data)
	{
		$ctx = \Runtime\rtl::getContext();
		$bus_key = $ctx->env("BUS_KEY");
		
		/* Get sign */
		$time = time();
		$arr = array_keys($data); sort($arr);
		array_push($arr, $time);
		$text = implode("|", $arr);
		$sign = hash_hmac("SHA512", $text, $bus_key);
		
		/* Make curl */
		$curl = curl_init();
		curl_setopt($curl, CURLOPT_URL, $url);
		curl_setopt($curl, CURLOPT_TIMEOUT, 5);
		curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 1);
		curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 10);
		curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);
		curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
		curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'POST');
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($curl, CURLOPT_HTTPHEADER, ["Content-Type: application/json"]);
		curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode
		(
			[
				"data" => $data,
				"time" => $time,
				"sign" => $sign,
				"alg" => "sha512",
			]
		));
		
		/* Send curl */
		$out = curl_exec($curl);
		$code = curl_getinfo($curl, CURLINFO_HTTP_CODE);
		curl_close($curl);
		
		$code = (int)$code;
		
		return [$code, $out];
	}
	
	
	#endif
	
	
	/**
	 * Bus call
	 */
	static ApiResult call(string url, Dict data = null)
	{
		
		#ifcode PHP then
		#endif
		
		return null;
    }
	
	
	/**
	 * Call api
	 */
	static async ApiResult callApi(string url, Dict data = null)
	{
		ApiResult res = new ApiResult();
		
		RenderContainer render_container = @.env("render_container");
		string current_locale_code = @.env("LOCALE_CODE");
		string api_url = "/" ~ current_locale_code ~ "/api" ~ url;
		
		if (data == null) data = {};
		
		#switch
		
		#case ifcode PHP then
		
		$api_container = new \Runtime\Web\RenderContainer();
		$api_container->backend_storage = $render_container->request->backend_storage;
		$api_container->request = new \Runtime\Web\Request($ctx, \Runtime\Dict::from([
			"uri" => $api_url,
			"host" => $render_container->request->host,
			"method" => "POST",
			"payload" => $data,
			"cookies" => $render_container->request->cookies,
			"start_time" => time(),
		]));
		
		try
		{
			$context = \Runtime\rtl::getContext();
			$routes = $context->provider("Runtime.Web.RouteList");
			$context->app->findRoute($api_container);
			$context->app->callRoute($api_container);
			
			if (
				$api_container->response != null and
				$api_container->response instanceof \Runtime\Web\ApiResult
			)
			{
				$res = $api_container->response;
			}
			else
			{
				throw new \Runtime\Exceptions\FileNotFound($api_url, "Api");
			}
		}
		catch (\Exception $e)
		{
			if ($e instanceof \Runtime\Exceptions\RuntimeException)
			{
				$res = $res->exception($e);
			}
			else
			{
				throw $e;
			}
		}
		
		#case ifcode ES6 then
		
		/* Build pos data */
		data = this.buildPostData(ctx, data);
		
		/* Send post */
		var xhr = await this.sendPost(ctx, api_url, data);
		
		res = Runtime.rtl.json_decode(xhr.responseText);
		res = new ApiResult(res);
		
		#endswitch
		
		return res;
	}
	
}



#ifcode ES6 then


Object.assign(Runtime.Web.Bus,
{
	
	/**
	 * Send post. Returns json object or null if error
	 */
	post: async function(ctx, url, data)
	{
		var url = obj.get(ctx, "url");
		var data = obj.get(ctx, "data");
		var storage = obj.get(ctx, "storage");
		
		/* Build pos data */
		var build_data = this.buildData(ctx, data, storage);
		var post_data = this.buildPostData(ctx, build_data);
		
		/* Send post */
		var xhr = await this.sendPost(ctx, url, post_data);
		return xhr.responseText;
	},
	
	
	/**
	 * Returns FormData
	 * @params data - json object
	 * @return FormData
	 */
	buildPostData: function(ctx, data)
	{
		var post_data = new FormData();
		
		/* Add data to post data */
		for (var i=0; i<data.length; i++)
		{
			var obj = data[i];
			var key = obj.key;
			var val = obj.value;
			if (val instanceof FileList)
			{
				for (var i=0; i<val.length; i++)
				{
					post_data.append(key + "[]", val.item(i), val.item(i).name);
				}
			}
			else if (val instanceof File)
			{
				post_data.append(key, val, val.name);
			}
			else
			{
				post_data.append(key, val);
			}
		}
		
		return post_data;
	},
	
	
	/**
	 * Send api request
	 * @param string class_name
	 * @param string method_name
	 * @param Map<string, mixed> data
	 * @param callback f
	 */ 
	sendPost: async function(ctx, url, post_data)
	{
		return await new Promise((resolve, reject) =>{
			try
			{
				var xhr = new XMLHttpRequest();
				xhr.open('POST', url, true);
				xhr.send(post_data);
				xhr.onreadystatechange = (function(ctx, xhr, resolve, reject) {
					return function()
					{
						if (xhr.readyState != 4) return;
						if (xhr.status == 200)
						{
							resolve(xhr);
						}
						else
						{
							reject
							(
								new Runtime.Exceptions.RuntimeException
								(ctx, xhr.status + " " + xhr.statusText, xhr.status) 
							);
						}
					}
				})(ctx, xhr, resolve, reject);
			}
			catch (e)
			{
				reject(e);
			}
		});
	},
	
});

#endif