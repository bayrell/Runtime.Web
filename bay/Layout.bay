/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.lib;
use Runtime.BaseStruct;
use Runtime.ModelProxy;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.AppHook;
use Runtime.Web.Breadcrumb;
use Runtime.Web.RouteInfo;
use Runtime.Web.RouteList;
use Runtime.Web.SeoModel;


struct Layout extends BaseStruct
{
	string title = "";
	string layout_name = "default";
	string page_class_name = "";
	string page_model_class_name = "";
	string page_route_class_name = "";
	Collection<string> css_classes = [];
	Collection<Breadcrumb> breadcrumbs = [];
	Dict<BaseStruct> pages = {};
	Dict<BaseStruct> models = {
		"seo": new SeoModel,
		"current_user": null,
	};
	
	/* Current route */
	RouteInfo route = null;
	string request_full_uri = "";
	string request_host = "";
	string request_uri = "";
	Dict<string> request_query = null;
	
	/* Increment assets */
	string f_inc = "1";
		
	/**
	 * Returns page model
	 */
	BaseStruct getPageModel() => this.page_model_class_name ?
		this.pages[ this.page_model_class_name ] : null;
	
	
	/**
	 * Returns page model proxy
	 */
	ModelProxy modelProxy(Collection path = null)
		=> new ModelProxy( this, ["pages", this.page_model_class_name].concat(path) )
	;
	
	
	/**
	 * Returns model path
	 */
	Collection getPageModelPath(Collection path = null)
		=> ["pages", this.page_model_class_name].concat(path)
	;
	
	
	/**
	 * Set page model
	 */
	Layout setPageModel(BaseStruct model)
	{
		Layout layout = this;
		
		if (model == null)
		{
			layout <= page_model_class_name <= "";
			return layout;
		}
		
		string class_name = model::getClassName();
		
		layout <= page_model_class_name <= class_name;
		layout <= pages <= { class_name } <= model;
		
		return layout;
	}
	
	
	/**
	 * Returns layout class name
	 */
	string getLayoutClassName()
	{
		string layout_name = this.layout_name;
		
		Dict d = @.callHook(AppHook::LAYOUT_PAGE_CLASS_NAME, new Map());
		
		string layout_page_class_name = d[layout_name]
			|> default string "Runtime.Web.LayoutPage"
		;
		
		return layout_page_class_name;
	}
	
	
	/**
	 * Init layout
	 */
	async Layout init_layout() => this;
	
	
	/**
	 * Clear layout
	 */
	Layout clear_layout() => this;
	
	
	/**
	 * Returns clear layout
	 **/
	static Layout getClearLayout(Layout layout)
	{
		Dict d = @.callHook(AppHook::CLEAR_LAYOUT, {
			"layout": layout,
		});
		layout = d["layout"];
		return layout.clear_layout();
	}
	
	
	/**
	 * Add breadcrumbs
	 */
	Layout addBreadcrumb(Dict d)
	{
		Layout layout = this;
		if (d instanceof Dict)
		{
			d = new Breadcrumb(d);
		}
		if (d instanceof Breadcrumb)
		{
			layout <= breadcrumbs <=  layout.breadcrumbs.pushIm(d);
		}
		return layout;
	}
	
	
	/**
	 * Set new title
	 */
	Layout setTitle(string title) => rtl::setAttr(this, ["title"], title);
	Layout setPageTitle(string title) => rtl::setAttr(this, ["title"], title);
	
	
	/**
	 * Set layout name
	 */
	Layout setLayoutName(string layout_name) => rtl::setAttr(this, ["layout_name"], layout_name);
	
	
	/**
	 * Add component
	 */
	Layout addComponent(string component_name)
	{
		Layout layout = this;
		layout <= css_classes <= layout.css_classes.appendIm(component_name);
		return layout;
	}
	
	
	/**
	 * Returns css class names
	 */
	Collection<string> getCssClasses()
	{
		Vector res = new Vector();
		
		/* Extends css class names */
		Dict d = @.callHook(AppHook::CSS_CLASS_NAMES, {
			"layout": this,
			"css_class_names": res,
		});
		
		return d["css_class_names"].toCollection().removeDuplicatesIm();
	}
	
	
	/**
	 * Returns url
	 */
	string url(string route_name, Dict route_params = null)
	{
		RouteList routes = @.provider(classof RouteList);
		return routes.url(route_name, route_params);
	}
	
	
	/**
	 * Returns css
	 */
	static string getCss(Collection<string> class_names, Dict css_vars = null)
	{
		if (css_vars == null)
		{
			css_vars = @.callHook(AppHook::CSS_VARS, css_vars);
		}
		
		/* Get required components */
		Collection<string> components = static::getRequiredComponents(class_names);
		components = components.filter(lib::equalNot("")).removeDuplicatesIm();
		
		/* Get css */
		Collection<string> css = components.map
		(
			string (string component_name) use (css_vars)
			{
				if (component_name == "") return "";
				if (not rtl::method_exists(component_name, "css")) return "";
				fn f = rtl::method(component_name, "css");
				string css = f(css_vars);
				return css;
			}
		);
		
		css = css
			.map( string (string s) => rs::trim(s) )
			.filter( bool (string s) => s != "" )
		;
		
		return rs::trim( rs::join("\n", css) );
	}
	
	
	/**
	 * Returns required modules
	 * @param string class_name
	 * @return Collection<string>
	 */
	static void _getRequiredComponents
	(
		Vector<string> res,
		Map<string> cache,
		Collection<string> components
	)
	{
		if (components == null)
			return;
		
		for (int i=0; i<components.count(); i++)
		{
			string class_name = components.item(i);
			if (cache.get(class_name, false) == false)
			{
				cache.setValue(class_name, true);
				if (rtl::method_exists(class_name, "components"))
				{
					fn f = rtl::method(class_name, "components");
					Collection<string> sub_components = f();
					if (sub_components != null)
					{
						static::_getRequiredComponents(res, cache, sub_components);
					}
				}
				res.pushValue(class_name);
			}
		}
	}
	
	
	/**
	 * Returns all components
	 * @param Collection<string> components
	 * @return Collection<string>
	 */
	pure Collection<string> getRequiredComponents(Collection<string> components)
	{
		components = components.filter(lib::equalNot("")).removeDuplicatesIm();
		Vector<string> res = new Vector();
		Map<string> cache = new Map();
		static::_getRequiredComponents(res, cache, components);
		res = res.removeDuplicatesIm();
		return res.toCollection();
	}
}