/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS;

use Runtime.lib;
use Runtime.Callback;
use Runtime.Web.AppHook;
use Runtime.Web.BaseModel;
use Runtime.Web.PageModel;


class Layout extends BaseModel
{
	string title = "";
	string layout_name = "default";
	string current_page_model = "";
	string current_page = "";
	
	/* Components list */
	Vector<string> components = [];
	
	/* Increment assets */
	string f_inc = "1";
	
	
	/**
	 * Returns model
	 */
	var model(Collection<string> model_path) => rtl::attr(this, model_path);
	
	
	/**
	 * Returns page model
	 */
	PageModel getPageModel()
	{
		return this.widgets.get(this.current_page_model);
	}
	
	
	/**
	 * Set current page model
	 */
	void setPageModel(string class_name)
	{
		PageModel page_model = rtl::newInstance(class_name, [this.container]);
		this.addWidget(page_model);
		this.current_page_model = page_model::getClassName();
	}
	
	
	/**
	 * Set current page
	 */
	void setCurrentPage(string current_page)
	{
		this.current_page = current_page;
	}
	
	
	/**
	 * Set layout name
	 */
	void setLayoutName(string layout_name)
	{
		this.layout_name = layout_name;
	}
	
	
	/**
	 * Set page title
	 */
	void setPageTitle(string title)
	{
		this.title = title;
	}
	
	
	/**
	 * Add component
	 */
	void addComponent(string class_name)
	{
		this.components.push(class_name);
	}
	
	
	/**
	 * Returns all components
	 * @return Collection<string>
	 */
	Vector<string> getComponents()
	{
		Vector<string> res = new Vector();
		Map<string> cache = new Map();
		
		/* Extends components */
		static::_getRequiredComponents(res, cache, this.components);
		res.removeDuplicates();
		
		/* Call hook */
		Map d = @.callHook(AppHook::COMPONENTS, {
			"layout": this,
			"components": res,
		});
		
		return d.get("components");
	}
	
	
	/**
	 * Returns required modules
	 * @param string class_name
	 * @return Collection<string>
	 */
	static void _getRequiredComponents
	(
		Vector<string> res,
		Map<string> cache,
		Collection<string> components
	)
	{
		if (components == null)
			return;
		
		for (int i=0; i<components.count(); i++)
		{
			string class_name = components.item(i);
			if (class_name)
			{
				continue;
			}
			if (not cache.has(class_name))
			{
				cache.setValue(class_name, true);
				
				Callback f = new Callback(class_name, "components");
				if (f.exists())
				{
					Collection<string> sub_components = rtl::apply(f);
					static::_getRequiredComponents(res, cache, sub_components);
				}
				
				res.pushValue(class_name);
			}
		}
	}
	
	
	/**
	 * Returns css
	 */
	static string getCss(Collection<string> components, Dict css_vars = null)
	{
		Collection<string> css = components.map
		(
			string (string component_name) use (css_vars)
			{
				if (component_name == "") return "";
				
				Callback f = new Callback(component_name, "css");
				if (not f.exists()) return "";
				
				string css = rtl::apply(f, [css_vars]);
				return css;
			}
		);
		
		css = css
			.map( string (string s) => rs::trim(s) )
			.filter( bool (string s) => s != "" )
		;
		
		return rs::trim( rs::join("\n", css) );
	}
}