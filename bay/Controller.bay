/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseObject;
use Runtime.Web.Events.WebEvent;
use Runtime.Web.Component;
use Runtime.Web.Controller;
use Runtime.Web.Element;
use Runtime.Web.Message;
use Runtime.Web.RenderDriver;
use Runtime.Web.VirtualDom;


class Controller extends BaseObject
{
	var driver = null;
	string class_name = "";
	Collection model_path = null;
	Dict params = null;
	var content = null;
	var elem = null;
	string controller_name = "";
	
	/* Virtual DOM */
	VirtualDom vdom = new VirtualDom{ "kind": "root", "controller": this };
	
	/* Pools */
	Vector<VirtualDom> render_components = null;
	Vector<VirtualDom> changed_items = null;
	Map<Component> components = new Map();
	
	
	
	/**
	 * Render
	 */
	public void render()
	{
		this.render_components = new Vector();
		this.changed_items = new Vector();
		this.vdom.flush();
		this.vdom.instance = this.elem;
		this.vdom.e("c", this.class_name, this.params.concat({ "@bind": ["", this.model_path] }));
		this.vdom.p();
		
		/* Loop render components */
		while (this.render_components.count() != 0)
		{
			Collection render_components = this.render_components.toCollection();
			this.render_components = new Vector();
			
			for (int i=0; i<render_components.count(); i++)
			{
				VirtualDom item = render_components[i];
				this.renderComponent(item);
			}
			
		}
		
	}
	
	
	
	/**
	 * Render component
	 */
	public void renderComponent(VirtualDom vdom)
	{
		Collection path = static::getComponentPath(vdom);
		string path_str = path.join(":");
		
		/* Get component by path */
		Component item = this.components.get(path_str, null)
		if (item != null and item.getClassName() != vdom.name) item = null;
		
		/* Create component if does not exists */
		if (item == null)
		{
			item = rtl::newInstance(vdom.name);
			item.controller = this;
			item.driver = this.driver;
			item.path_id = path;
			item.is_new_element = true;
		}
		else
		{
			item.is_new_element = false;
		}
		
		/* Set instance */
		vdom.instance = item;
		item.vdom = vdom;
		
		/* Model path */
		Collection model_path = [];
		
		/* Find model */
		Collection params_keys = ["@bind", "@name", "@model"];
		if (vdom.params != null)
		{
			for (int params_keys_i=0; params_keys_i<params_keys.count(); params_keys_i++)
			{
				string key = params_keys[params_keys_i];
				if (vdom.params.has(key))
				{
					model_path = static::findModelPath(vdom, vdom.params[key]);
					break;
				}
			}
		}
		
		/* Set model */
		item.old_model = item.new_model;
		item.new_model = this.driver.model(model_path);
		item.model_path = model_path;
		
		/* Save component */
		this.components.setValue(path_str, item);
		
		/* Repaint */
		item.repaint(vdom);
		
		/* On create */
		if (item.is_new_element) item.onCreate();
		
		/* On update */
		item.onUpdate();
	}
	
	
	
	/**
	 * Find model path
	 */
	static Collection findModelPath(VirtualDom vdom, Collection arr)
	{
		string component_name = arr[0];
		Collection model_path = arr[1];
		if (rtl::isString(model_path)) model_path = [ model_path ];
		
		if (component_name == "")
		{
			return model_path;
		}
		
		while (vdom != null)
		{
			if (vdom.name == component_name)
			{
				return vdom.instance.model_path.concat(model_path);
			}
			vdom = vdom.parent_component;
		}
		
		return model_path;
	}
	
	
	
	/**
	 * Returns component path
	 */
	static Collection getComponentPath(VirtualDom vdom)
	{
		Vector res = new Vector();
		while (vdom != null)
		{
			res.pushValue(vdom.name);
			vdom = vdom.parent_component;
		}
		return res.toCollection().reverse();
	}
	
	
	
	/**
	 * Get component of the Virtual Dom
	 */
	static Component getVirtualDomComponent(VirtualDom vdom)
	{
		if (vdom.kind == VirtualDom::KIND_COMPONENT) return vdom;
		return vdom.parent_component;
	}
} 
