/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseHook;
use Runtime.Web.Layout;


class AppHook extends BaseHook
{
	static const string CALL_ROUTE_AFTER = "runtime.web.app::call_route_after";
	static const string CALL_ROUTE_BEFORE = "runtime.web.app::call_route_before";
	static const string COMPONENTS = "runtime.web.app::components";
	static const string FIND_ROUTE = "runtime.web.app::find_route";
	static const string FIND_ROUTE_AFTER = "runtime.web.app::find_route_after";
	static const string INIT_CONTAINER = "runtime.web.app::init_container";
	static const string MIDDLEWARE_AFTER = "runtime.web.app::middleware_after";
	static const string MIDDLEWARE_BEFORE = "runtime.web.app::middleware_before";
	static const string RESPONSE = "runtime.web.app::response";
	
	
	/**
	 * Returns method name by hook name
	 */
	string getMethodName(string hook_name)
	{
		if (hook_name == static::CALL_ROUTE_AFTER) return "call_route_after";
		if (hook_name == static::CALL_ROUTE_BEFORE) return "call_route_before";
		if (hook_name == static::COMPONENTS) return "components";
		if (hook_name == static::FIND_ROUTE) return "find_route";
		if (hook_name == static::FIND_ROUTE_AFTER) return "find_route_after";
		if (hook_name == static::INIT_CONTAINER) return "init_container";
		if (hook_name == static::MIDDLEWARE_AFTER) return "middleware_after";
		if (hook_name == static::MIDDLEWARE_BEFORE) return "middleware_before";
		if (hook_name == static::RESPONSE) return "response";
		return "";
	}
	
	
	/**
	 * Register hooks
	 */
	void register_hooks()
	{
	}
	
	
	/**
	 * Route before
	 */
	async Map call_route_before(Map d) => d;
	
	
	/**
	 * Route after
	 */
	async Map call_route_after(Map d) => d;
	
	
	/**
	 * Components
	 */
	Map components(Map d) => d;
	
	
	/**
	 * Find route
	 */
	Map find_route(Map d) => d;
	
	
	/**
	 * Find route after
	 */
	Map find_route_after(Map d) => d;
	
	
	/**
	 * Init container
	 */
	async Map init_container(Map d) => d;
	
	
	/**
	 * Middleware before
	 */
	async Map middleware_before(Map d) => d;
	
	
	/**
	 * Middleware after
	 */
	async Map middleware_after(Map d) => d;
	
	
	/**
	 * Response
	 */
	async Map response(Map d) => d;
}