/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseObject;
use Runtime.Callback;
use Runtime.Serializer;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Web.RenderResponse;
use Runtime.Web.Request;
use Runtime.Web.Response;
use Runtime.Web.RouteInfo;
use Runtime.Web.WidgetSerializer;
use Runtime.Web.Hooks.AppHook;


class RenderContainer extends BaseObject
{
	public BaseRoute base_route = null;
	public Request request = null;
	public Response response = null;
	public RouteInfo route = null;
	public Layout layout = null;
	public Map frontend_env = {};
	public Vector teleports = [];
	
	
	/**
	 * Call api
	 */
	ApiResult callApi(Map params)
	{
		return null;
	}
	
	
	/**
	 * Export data
	 */
	Map exportData()
	{
		Map data = {
			"entry_point": "",
			"modules": [],
			"environments": this.frontend_env,
		};
		
		/* Create serializer */
		Serializer serializer = new WidgetSerializer();
		serializer.setCallback("processFrontendData");
		serializer.setFlag(Serializer::EXPORT);
		
		/* Export data */
		serializer.process(this, "layout", data);
		
		/* Call hook */
		@.callHook(AppHook::EXPORT_DATA, {
			"container": this,
			"data": data,
		});
		
		return data;
	}
	
	
	/**
	 * Import data
	 */
	void importData(Map data)
	{
		/* Call hook */
		@.callHook(AppHook::IMPORT_DATA, {
			"container": this,
			"data": data,
		});
		
		/* Create serializer */
		Serializer serializer = new WidgetSerializer();
		serializer.setCallback("processFrontendData");
		serializer.setFlag(Serializer::IMPORT);
		
		/* Load data */
		this.layout.processFrontendData(serializer, data.get("layout"));
		
		/* Call hook */
		@.callHook(AppHook::IMPORT_DATA_AFTER, {
			"container": this,
			"data": data,
		});
	}
	
	
	/**
	 * Render page and setup response
	 */
	void render(string class_name = "")
	{
		this.layout.addComponent(class_name);
		this.layout.setCurrentPage(class_name);
		this.response = new RenderResponse();
		this.response.class_name = class_name;
	}
	
	
	/**
	 * Set response
	 */
	void setResponse(Response response)
	{
		this.response = response;
	}
}