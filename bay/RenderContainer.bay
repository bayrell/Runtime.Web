/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseObject;
use Runtime.BaseStruct;
use Runtime.Vector;
use Runtime.Web.AppHook;
use Runtime.Web.CoreUI;
use Runtime.Web.Layout;
use Runtime.Web.ModelProxy;
use Runtime.Web.RenderResponse;
use Runtime.Web.Request;
use Runtime.Web.Response;
use Runtime.Web.RouteInfo;


class RenderContainer extends BaseObject
{
    Request request = null;
    Response response = null;
	RouteInfo route = null;
    Layout layout = null;
	Dict frontend_env = {};
	Dict backend_storage = {};
	
    
    /**
	 * Page title
	 */
	void setPageTitle(string title)
	{
		this.layout = rtl::setAttr(this.layout, ["title"], title);
	}
	
	
	/**
	 * Set page model to layout
	 */
	void setPageModel(BaseStruct model)
	{
		string class_name = model::getClassName();
		
		this.layout = rtl::setAttr(this.layout, ["page_model_class_name"], class_name);
		this.layout = rtl::setAttr(this.layout, ["pages", class_name], model);
	}
	
	
	/**
	 * Set layout name
	 */
	void setLayoutName(string layout_name)
	{
		RenderContainer container = this;
		container <= layout <= layout_name <= layout_name;
	}
	
	
	/**
	 * Create page model if does not exists
	 */
	void getPageModel(string class_name)
	{
		BaseStruct model = this.layout.pages[class_name];
		
		if (model == null)
		{
			model = rtl::newInstance(class_name);
		}
		
		return model;
	}
	
	
	/**
	 * Returns page model proxy
	 */
	ModelProxy modelProxy(Collection path = null)
		=> new ModelProxy( this, ["layout", "pages", this.layout.page_model_class_name].concat(path) )
	;
	
	
	/**
	 * Returns layout model proxy
	 */
	ModelProxy layoutProxy(Collection path = null)
		=> new ModelProxy( this, ["layout"].concat(path) );
	
	
	/**
	 * Update model event
	 */
	void onUpdateModel(Collection path)
	{
		
	}
	
	
	/**
	 * Render page and setup response
	 */
	void render(string class_name)
	{
		this.layout = rtl::setAttr(this.layout, ["page_class_name"], class_name);
		this.response = new RenderResponse
		{
			"class_name": class_name,
			"layout": this.layout,
		};
	}
	
	
	/**
	 * Set response
	 */
	void setResponse(Response response)
	{
		this.response = response;
	}
	
	
	/**
	 * Setup redirect response
	 */
	void redirect(string class_name)
	{
	}
	
	
	/**
	 * Returns css class names
	 */
	Collection<string> getCssClasses()
	{
		Vector res = new Vector();
		
		/* Extends css class names */
		Dict d = @.callHook(AppHook::CSS_CLASS_NAMES, {
			"container": this,
			"css_class_names": res,
		});
		
		/* Add page class name */
		if (res.indexOf(this.layout.page_class_name) == -1)
		{
			res.pushValue(this.layout.page_class_name);
		}
		
		return d["css_class_names"].toCollection();
	}
}
