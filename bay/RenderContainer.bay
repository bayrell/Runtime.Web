/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseObject;
use Runtime.Callback;
use Runtime.Serializer;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseLayoutModel;
use Runtime.Web.BaseModel;
use Runtime.Web.BasePageModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Cookie;
use Runtime.Web.Layout;
use Runtime.Web.RenderResponse;
use Runtime.Web.Request;
use Runtime.Web.Response;
use Runtime.Web.RouteInfo;
use Runtime.Web.RouteList;
use Runtime.Web.Hooks.AppHook;


class RenderContainer extends BaseObject
{
	public BaseRoute base_route = null;
	public Request request = null;
	public Response response = null;
	public RouteInfo route = null;
	public Layout layout = null;
	public Vector teleports = [];
	public Dict<Cookie> cookies = {};
	
	
	/**
	 * Create layout
	 */
	async void createLayout()
	{
		/* Get layout class name */
		Dict params = @.callHook(AppHook::LAYOUT_MODEL_NAME, {
			"class_name": classof BaseLayoutModel,
		});
		
		/* Create layout */
		this.layout = rtl::newInstance(params.get("class_name"));
		
		/* Call route before */
		await @.callHookAsync(AppHook::CREATE_LAYOUT, {
			"container": this,
		});
	}
	
	
	/**
	 * Find route
	 */
	void findRoute()
	{
		/* Call hook find route */
		@.callHook(AppHook::FIND_ROUTE_BEFORE, {
			"container": this,
		});
		
		/* Find route */
		if (this.route == null and this.response == null)
		{
			RouteList routes = @.provider(classof RouteList);
			this.route = routes.findRoute(this);
		}
		
		/* Call hook found route */
		await @.callHook(AppHook::FIND_ROUTE, {
			"container": this,
		});
	}
	
	
	/**
	 * Setup default layout name from route
	 */
	void setupLayoutName()
	{
		if (this.route == null) return;
		
		/* Get function */
		Callback getLayoutName = new Callback(this.route.route_class, "getLayoutName");
		if (not getLayoutName.exists()) return;
		
		/* Set layout name */
		string layout_name = getLayoutName.apply();
		this.layout.setLayoutName(layout_name);
	}
	
	
	/**
	 * Resolve route
	 */
	async void resolveRoute()
	{
		/* Setup layout name */
		this.setupLayoutName();
		
		/* Call route before */
		await @.callHookAsync(AppHook::ROUTE_BEFORE, {
			"container": this,
		});
		
		/* Call middleware */
		await this.callRouteMiddleware();
		
		/* Call route */
		if (this.response == null)
		{
			/* Call layout route before */
			await this.layout.onActionBefore(this);
			
			/* Load layout data */
			await this.layout.loadData(this);
			
			/* Run route */
			if (this.route != null)
			{
				await this.route.resolve(this);
			}
			
			/* Call layout route after */
			await this.layout.onActionAfter(this);
		}
		
		/* Call route after */
		await @.callHookAsync(AppHook::ROUTE_AFTER, {
			"container": this,
		});
	}
	
	
	/**
	 * Call route middleware
	 */
	async void callRouteMiddleware()
	{
		if (this.route and this.route.middleware)
		{
			for (int i = 0; i<this.route.middleware.count(); i++)
			{
				Callback middleware = this.route.middleware.get(i);
				await rtl::apply(middleware, [this]);
			}
		}
		
		/* Call hook middleware */
		await @.callHook(AppHook::ROUTE_MIDDLEWARE, {
			"container": this,
		});
	}
	
	
	/**
	 * Render route
	 */
	async void renderRoute(string class_name, string method_name)
	{
		if (this.response != null) return;
		
		/* Cancel previous route */
		if (this.base_route != null)
		{
			this.base_route.cancelRoute();
			this.base_route = null;
		}
		
		/* Create route */
		BaseRoute base_route = rtl::newInstance(class_name, [this]);
		this.base_route = base_route;
		this.base_route.post_data = this.request.payload;
		
		/* Action before */
		await base_route.onActionBefore();
		
		/* Call route */
		if (method_name != "")
		{
			Callback route = new Callback(base_route, method_name);
			await rtl::apply(route);
		}
		
		/* Action after */
		if (not base_route.isCancelRoute())
		{
			await base_route.onActionAfter();
		}
	}
	
	
	/**
	 * Render page model
	 */
	async void renderPageModel(string model_name)
	{
		this.layout.setPageModel(model_name);
		BasePageModel page_model = this.layout.getPageModel();
		if (page_model)
		{
			await page_model.actionIndex(this);
		}
	}
	
	
	/**
	 * Set response
	 */
	void setResponse(Response response)
	{
		this.response = response;
	}
	
	
	/**
	 * Render page and setup response
	 */
	void renderPage(string page_class_name = "")
	{
		this.response = new RenderResponse();
		this.layout.current_page_class = page_class_name;
		if (page_class_name != "")
		{
			this.layout.addComponent(page_class_name);
		}
	}
	
	
	/**
	 * Cancel route
	 */
	void cancelRoute()
	{
		if (this.base_route) this.base_route.cancelRoute();
	}
	
	
	/**
	 * Add cookie
	 */
	Response addCookie(Cookie cookie)
	{
		this.cookies.set(cookie.name, cookie);
	}
	
	
	/**
	 * Returns frontend environments
	 */
	Map getFrontendEnvironments()
	{
		Map environments = {};
		
		/* Setup environments */
		Collection arr = ["CLOUD_ENV", "DEBUG", "LOCALE", "TZ", "TZ_OFFSET", "ROUTE_PREFIX"];
		
		/* Call hook */
		Dict params = @.callHook(AppHook::ENVIRONMENTS, {
			"arr": arr,
			"environments": environments,
		});
		
		/* Get result */
		arr = params.get("arr");
		environments = params.get("environments");
		
		/* Copy environments */
		for (int i=0; i<arr.count(); i++)
		{
			string name = arr.get(i);
			environments.set(name, @.env(name));
		}
		
		return environments;
	}
	
	
	/**
	 * Export data
	 */
	Map exportData()
	{
		Map data = {
			"entry_point": @.entry_point,
			"modules": @.start_modules,
			"environments": this.getFrontendEnvironments(),
		};
		
		/* Create serializer */
		Serializer serializer = new Serializer();
		serializer.setFlag(Serializer::ALLOW_OBJECTS);
		serializer.setFlag(Serializer::ENCODE);
		
		/* Export data */
		serializer.process(this, "layout", data);
		
		/* Call hook */
		@.callHook(AppHook::EXPORT_CONTAINER_DATA, {
			"container": this,
			"data": data,
		});
		
		return data;
	}
	
	
	/**
	 * Import data
	 */
	void importData(Map data)
	{
		/* Call hook */
		@.callHook(AppHook::IMPORT_CONTAINER_DATA_BEFORE, {
			"container": this,
			"data": data,
		});
		
		/* Create serializer */
		Serializer serializer = new Serializer();
		serializer.setFlag(Serializer::ALLOW_OBJECTS);
		serializer.setFlag(Serializer::DECODE);
		
		/* Load data */
		this.layout.serialize(serializer, data.get("layout"));
		
		/* Call hook */
		@.callHook(AppHook::IMPORT_CONTAINER_DATA_AFTER, {
			"container": this,
			"data": data,
		});
	}
}