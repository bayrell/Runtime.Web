/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.lib;
use Runtime.BaseObject;
use Runtime.Web.LayoutModel;
use Runtime.Web.RenderContainer;
use Runtime.Web.RouteList;


class BaseModel extends BaseObject
{
	LayoutModel layout = null;
	string widget_name = "";
	Map widgets = {};
	
	
	/**
	 * Create model
	 */
	void constructor(LayoutModel layout)
	{
		parent();
		this.layout = layout;
	}
	
	
	/**
	 * Add widget
	 */
	void addWidget(BaseModel new_widget)
	{
		string widget_name = new_widget.widget_name;
		this.widgets.set(widget_name, new_widget);
	}
	
	
	/**
	 * Init model
	 */
	void init()
	{
	}
	
	
	/**
	 * Load data
	 */
	async void loadData()
	{
	}
	
	
	/**
	 * Import data
	 */
	void importData(Map import_data)
	{
		this.importWidgets(import_data.get("widgets"));
	}
	
	
	/**
	 * Import widgets
	 */
	void importWidgets(Map widgets_data)
	{
		Collection<string> widgets_keys = widgets_data.keys();
		for (int i=0; i<widgets_keys.count(); i++)
		{
			string widget_key = widgets_keys.get(i);
			
			BaseModel widget = this.widgets.get(widget_key);
			Map widget_data = widgets_data.get(widget_key);
			
			if (widget == null)
			{
				string class_name = widget_data.get("__class_name__");
				widget = rtl::newInstance(class_name, [this.layout]);
				widget.init();
				this.widgets.set(widget_key, widget);
			}
			
			widget.importData(widget_data);
		}
	}
	
	
	/**
	 * Export data
	 */
	Map exportData()
	{
		return {
			"__class_name__": static::getClassName(),
			"widget_name": this.widget_name,
			"widgets": this.exportWidgets(),
		};
	}
	
	
	/**
	 * Export widgets
	 */
	Map exportWidgets()
	{
		Map res = {};
		
		Collection widgets_keys = this.widgets.keys();
		for (int i=0; i<widgets_keys.count(); i++)
		{
			string widget_key = widgets_keys.get(i);
			BaseModel widget = this.widgets.get(widget_key);
			res.set(widget_key, widget.exportData());
		}
		
		return res;
	}
	
	
	/**
	 * Returns url
	 */
	string url(string route_name, Dict route_params = null)
	{
		if (not this.layout.routes.has(route_name)) return null;
		
		string url = this.layout.routes.get(route_name);
		if (route_params == null) return url;
		
		route_params.each(
			void (string value, string key) use (url)
			{
				int pos = rs::indexOf(url, "{" ~ key ~ "}");
				if (pos >= 0)
				{
					url = rs::replace("{" ~ key ~ "}", value, url);
				}
				else
				{
					url = rs::url_get_add(url, key, value);
				}
			}
		);
		
		return url;
	}
}