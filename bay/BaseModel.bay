/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseStruct;
use Runtime.ModelProxy;
use Runtime.Web.BaseRoute;
use Runtime.Web.RouteList;


struct BaseModel extends BaseStruct
{
	string widget_name = "";
	Dict widgets = {};
	
	
	/**
	 * Add widget
	 */
	BaseModel addWidget(BaseModel model) => this.clone
	{
		"widgets": this.widgets.setIm(model.widget_name, model),
	};
	
	
	/**
	 * Returns widget
	 */
	BaseModel getWidget(string widget_name) => this.widgets.get(widget_name);
	
	
	/**
	 * Setup widgets
	 */
	async static void setupWidgets(ModelProxy<BaseModel> widget, BaseRoute route)
	{
		Dict widgets = widget.data("widgets");
		Collection widgets_keys = widgets.keys();
		
		for (int i=0; i<widgets_keys.count(); i++)
		{
			string widget_name = widgets_keys.get(i);
			ModelProxy<BaseModel> widget = widget.proxy(["widgets", widget_name]);
			await widget.commitAsync("setupWidgets", route);
		}
	}
	
	
	/**
	 * Load widgets data
	 */
	async static void loadWidgets(ModelProxy<BaseModel> widget, BaseRoute route)
	{
		Dict widgets = widget.data("widgets");
		Collection widgets_keys = widgets.keys();
		
		for (int i=0; i<widgets_keys.count(); i++)
		{
			string widget_name = widgets_keys.get(i);
			ModelProxy<BaseModel> widget = widget.proxy(["widgets", widget_name]);
			await widget.commitAsync("loadWidgets", route);
		}
	}
	
	
	/**
	 * Returns url
	 */
	static string url(string route_name, Dict route_params = null)
	{
		RouteList routes = @.provider(classof RouteList);
		return routes.url(route_name, route_params);
	}
	
}