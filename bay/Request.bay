/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime.Web;

use Runtime.lib;
use Runtime.CoreStruct;
use Runtime.RuntimeUtils;
use Runtime.Web.Cookie;


struct Request extends CoreStruct
{
	static const string METHOD_GET = "GET";
	static const string METHOD_HEAD = "HEAD";
	static const string METHOD_POST = "POST";
	static const string METHOD_PUT = "PUT";
	static const string METHOD_DELETE = "DELETE";
	static const string METHOD_CONNECT = "CONNECT";
	static const string METHOD_OPTIONS = "OPTIONS";
	static const string METHOD_TRACE = "TRACE";
	static const string METHOD_PATCH = "PATCH";
	
	
	public string uri = "";
	public string host = "";
	public string method = "GET";
	public string route_prefix = "";
	public Dict<string> query = null;
	public Dict<var> payload = null;
	public Dict<Cookie> cookies = null;
	public Dict<string> headers = null;
	public Dict<string> params = null;
	public float start_time = 0;
	
	
	/**
	 * Send response
	 * @return Response res
	 */
	public static Request createPHPRequest()
	{
		Request r = null;
		
		#switch
		#case ifcode PHP then
		$host = isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : "";
		$uri = isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : "";
		$method = isset($_SERVER['REQUEST_METHOD']) ? $_SERVER['REQUEST_METHOD'] : "";
		$start_time = isset($_SERVER['REQUEST_TIME_FLOAT']) ? $_SERVER['REQUEST_TIME_FLOAT'] : "";
		$query = new \Runtime\Map($ctx);
		$payload = new \Runtime\Map($ctx);
		$cookies = new \Runtime\Map($ctx);
		foreach ($_GET as $key => $val) $query->set($ctx, $key, $val);
		foreach ($_POST as $key => $val)
		{
			$payload->set($ctx, $key, \Runtime\RuntimeUtils::NativeToObject($ctx, $val));
		}
		foreach ($_COOKIE as $key => $val)
		{
			$cookies->set
			(
				$ctx, 
				$key,
				new \Runtime\Web\Cookie
				(
					$ctx,
					\Runtime\Dict::from([
						'name' => $key,
						'value' => $val,
					])
				)
			);
		}
		$arr = parse_url($uri);
		$uri = isset($arr['path']) ? $arr['path'] : "";
		$r = new Request
		(
			$ctx, 
			\Runtime\Dict::from([
				"host" => $host,
				"uri" => $uri,
				"method" => $method,
				"query" => $query->toDict($ctx),
				"payload" => $payload->toDict($ctx),
				"cookies" => $cookies->toDict($ctx),
				"start_time" => $start_time,
			])
		);
		
		#endswitch
		
		return r;
	}	
	
	
	
	/**
	 * Returns api data
	 */
	pure memorize var decodePayload(Request r) =>
		r
			-> attr "payload"
			-> lib::get("DATA", "")
			-> RuntimeUtils::base64_decode_url
			-> RuntimeUtils::json_decode
	;
	
}
