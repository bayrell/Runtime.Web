/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseStruct;
use Runtime.RuntimeUtils;
use Runtime.Exceptions.RuntimeException;
use Runtime.Core.CoreDriver;
use Runtime.Core.CoreEvent;
use Runtime.Core.CoreObject;
use Runtime.Core.Message;
use Runtime.Web.Component;
use Runtime.Web.LayoutModel;
use Runtime.Web.RenderDriver;
use Runtime.Web.RenderDriverControl;
use Runtime.Web.Events.ChangeEvent;


class RenderController extends CoreDriver
{
	protected var ctx = null;
	protected string selector = "";
	protected var root_elem = null;
	protected var animation_id = null;
	protected bool is_main_controller = false;
	protected LayoutModel layout = null;
	protected Collection<string> layout_components = null;
	
	/* Render variable */
	protected Vector updated_components = null;
	protected Vector remove_keys = null;
	protected Map<CoreObject> components = null;
	protected int next_component_id = 0;
	protected string new_css = "";
	protected string old_css = "";
	
	
	/**
	 * Returns true if main controller
	 */
	bool isMainController() => this.is_main_controller;
	
	
	
	/**
	 * Component get path
	 */
	string getPath() => this.object_name;
	
	
	
	/**
	 * Returns model path
	 */
	Collection<string> getModelPath() => [];
	
	
	
	/**
	 * Returns model
	 */
	var model(Collection<string> model_path = null, var def_val = null) =>
		rtl::attr(this.layout, model_path, def_val)
	;
	
	
	
	/**
	 * Update model
	 */
	void updateModel(Collection<string> model_path = null, var value = null)
	{
		this.layout = rtl::setAttr(this.layout, model_path, value);
		this.repaint();
	}
	
	
	
	/**
	 * Returns next unique component id
	 */
	string nextComponentId()
	{
		this.next_component_id = this.next_component_id + 1;
		return this.getObjectName() ~ ".obj." ~ this.next_component_id;
	}
	
	
	
	/**
	 * Output warning message
	 */
	void warning(string msg)
	{
		#ifcode JAVASCRIPT then
		var arr = Array.apply(null, arguments);
		arr.shift(); /* Remove ctx */
		arr.unshift("[Warning]");
		console.log.apply(null, arr);
		#endif
	}
	
	
	
	/**
	 * Returns component by path
	 */
	Component getComponent(string path_id, string class_name = "")
	{
		if (not this.components.has(path_id)) return null;
		
		CoreObject component = this.components.item(path_id);
		if (class_name != "")
		{
			string component_class_name = component.getClassName();
			Vector<string> component_parents = RuntimeUtils::getParents(component_class_name);
			if (component_class_name != class_name and component_parents.indexOf(class_name) == -1)
			{
				return null;
			}
		}
		
		return component;
	}
	
	
	
	/**
	 * Search component in parents
	 */
	Component searchComponent(string path_id, string class_name)
	{
		Vector<string> arr = Vector::@from( rs::split("\\.", path_id) );
		while (arr.count() > 0)
		{
			string path = rs::join(".", arr);
			Component component = this.getComponent(path, class_name);
			if (component != null)
			{
				return component;
			}
			arr.pop();
		}
		if (class_name == this.getClassName()) return this;
		return null;
	}
	
	
	
	/**
	 * Save component
	 */
	void saveComponent(Component component)
	{
		this.components.setValue(component.getPath(), component);
		@.addObject(component);
	}
	
	
	
	/**
	 * Add to update component
	 */
	void updateComponent(RenderDriverControl control, Component component, bool created = false)
	{
		this.updated_components.pushValue({ "control": control, "component": component, "created": created });
	}
	
	
	
	/**
	 * Remove component recursive
	 */
	void removeComponentsRecursive(string path_id)
	{
		Collection<string> keys = this.components.keys();
		for (int i=0; i<keys.count(); i++)
		{
			string item_name = keys[i];
			if (rs::strpos(item_name, path_id) == 0)
			{
				this.components.removeValue(item_name);
			}
		}
	}
	
	
	
	/**
	 * Returns model path from @bind value
	 */
	Collection<string> getBindModelPath(string path_id, Collection bind_value)
	{
		string class_name = bind_value[0];
		Collection bind_name = bind_value[1];
		if (rtl::isString(bind_name))
		{
			bind_name = Collection::@from([bind_name]);
		}
		
		Component component = this.searchComponent(path_id, class_name);
		if (component == null)
		{
			this.warning("Bind model: " ~ class_name ~ " not found");
			return;
		}
		
		/* Get model path */
		Collection<string> model_path = component.getModelPath();
		model_path = model_path.concat(bind_name);
		return model_path;
	}
	
	
	
	/**
	 * Returns model value from @bind value
	 */
	var getBindModelValue(string path_id, Collection bind_value, var def_val = null)
	{
		Collection<string> model_path = this.getBindModelPath(path_id, bind_value);
		return this.model(model_path, def_val);
	}
	
	
	
	/**
	 * Set reference
	 */
	public void setReference(string path_id, Collection bind_value, Component item)
	{
		string class_name = bind_value[0];
		string bind_name = bind_value[1];
		Component component = this.searchComponent(path_id, class_name);
		component[bind_name] = item;
	}
	
	
	
	/**
	 * Send event
	 */
	public async void signal(string path_id, CoreEvent event)
	{
		Message msg = new Message(event, path_id);
		await @.object_manager.handleMessage(msg);
	}
	
	
	
	/**
	 * Start driver
	 */
	public async void startDriver()
	{
		this.setParent( @.getDriver(classof RenderDriver) );
		this.selector = this.entity["params", "selector"] |> default string "";
		this.is_main_controller = this.entity["params", "main_controller"] |> default bool false;
		string selector_model = this.entity["params", "selector_model"] |> default string "";
		if (selector_model == null or selector_model == "")
		{
			selector_model = this.selector ~ "_model";
		}
		
		string window_name = this.entity["params", "window"] |> default string "";
		#ifcode JAVASCRIPT then
		if (window_name != "") window[window_name] = this;
		if (this.selector != "") this.root_elem = document.querySelector(this.selector);
		
		/* Get controller model */
		if (selector_model != "" && selector_model != null)
		{
			var layout_input = document.querySelector(selector_model);
			if (layout_input)
			{
				var layout = layout_input.value;
				layout = Runtime.rs.base64_decode_url(ctx, layout);
				layout = Runtime.RuntimeUtils.json_decode(ctx, layout);
				this.layout = layout;
			}
		}
		
		#endif
		
		this.components = new Map();
		this.saveComponent(this);
	}
	
	
	
	/**
	 * Render layout
	 */
	public void renderLayout(LayoutModel layout)
	{
		if (layout == null) return;
		layout = RenderDriver::chainLayout(layout);
		Collection<string> components = RenderDriver::getLayoutComponents(layout);
		string css = RenderDriver::getCSSFromComponents(components, layout.css_vars);
		this.layout = layout;
		this.layout_components = components;
		this.applyCss(css);
		this.repaint();
	}
	
	
	
	/**
	 * Repaint layout
	 */
	public void repaint()
	{
		#ifcode JAVASCRIPT then
		if (this.animation_id == null)
		{
			this.ctx = ctx;
			this.animation_id = requestAnimationFrame( this.render.bind(this) );
		}
		#endif
	}
	
	
	
	/**
	 * Apply css
	 */
	public void applyCss(string css)
	{
		this.new_css = css;
	}
	
	
	
	/**
	 * Render layout
	 */
	protected void render()
	{
		var ctx = this.ctx;
		this.animation_id = null;
		
		this.updated_components = new Vector();
		this.remove_keys = new Vector();
		this.register_listeners = new Vector();
		
		RenderDriverControl root_control = new RenderDriverControl
		{
			"ctx": ctx,
			"controller": this,
			"component": this,
			"parent_elem": this.root_elem,
			"path_id": this.getPath(),
			"driver": this.parent,
		};
		
		if (this.layout.layout_class == "")
		{
			throw new RuntimeException
			(
				"Layout " ~ this.layout.layout_name ~ " not found",
			);
		}
		
		#ifcode JAVASCRIPT then
		var res = RenderDriver.e
		(
			root_control, [],
			"component",
			{
				"name": this.layout.layout_class,
				"attrs": {
					"@bind": ["Runtime.Web.RenderController", []],
					"@key": ""
				},
			},
			0
		);
		RenderDriver.p(root_control, res[1]);
		
		/* console.log(this.remove_keys); */
		
		/* Remove objects */
		for (var i=0; i<this.remove_keys.count(); i++)
		{
			var path_id = this.remove_keys[i];
			this.removeComponentsRecursive(ctx, path_id);
			this.manager.removeObjectRecursive(ctx, path_id);
		}
		
		/* Add new css */
		if (this.new_css != this.old_css)
		{
			var elem = document.querySelector(this.selector + "_style");
			if (elem != null)
			{
				if (elem.textContent != this.new_css) elem.textContent = this.new_css;
			}
			else
			{
				var elem = RenderDriver.getPreviousElement(this.root_elem);
				if (elem != null && elem.tagName == "STYLE" && elem._root_elem == this.root_elem)
				{
				}
				else
				{
					elem = document.createElement("STYLE");
					elem._root_elem = this.root_elem;
					this.root_elem.parentElement.insertBefore(elem, this.root_elem);
				}
				if (elem.textContent != this.new_css) elem.textContent = this.new_css;
			}
		}
		
		/* Set title */
		if (this.isMainController(ctx))
		{
			document.title = this.layout.title;
		}
		
		/* Register listeners */
		for (var i=0; i<this.register_listeners.count(); i++)
		{
			var listen = this.register_listeners[i];
			ctx.registerListener
			(
				ctx,
				listen.from,
				listen.event_class_name,
				listen.object_name,
				listen.method_name
			);
		}
		
		/* Save updated components */
		for (var i=0; i<this.updated_components.count(); i++)
		{
			var obj = this.updated_components[i];
			var component = obj.get(ctx, "component");
			this.saveComponent(ctx, component);
		}
		
		/* Call update components */
		for (var i=0; i<this.updated_components.count(); i++)
		{
			var obj = this.updated_components[i];
			var control = obj.get(ctx, "control");
			var component = obj.get(ctx, "component");
			var created = obj.get(ctx, "created");
			component.updateComponent(ctx, control, created);
		}
		
		#endif
		
		this.old_css = this.new_css;
	}
	
	
	
	/**
	 * Update elem params
	 */
	public void updateElemParams(RenderDriverControl control, var elem)
	{
		#ifcode JAVASCRIPT then
		
		var model = control.model;
		var is_new_elem = control.is_new_elem;
		var component = elem._component;
		var attrs = elem._attrs;
		var path_id = elem._path_id;
		
		/* Set attrs */
		if (attrs != null)
		{
			/* Add attributes */
			for (var key in attrs)
			{
				var value = attrs[key];
				if (key == "@bind")
				{
					value = this.getBindModelValue(ctx, path_id, value);
				}
				if (key == "@ref")
				{
					this.setReference(ctx, path_id, value, elem);
					continue;
				}
				if (key == "@name")
				{
					value = this.getBindModelValue(ctx, path_id, value);
					this.setReference(ctx, path_id, value, elem);
				}
				if (key == "value" || key == "@bind" || key == "@name")
				{
					if (elem.tagName == "INPUT" || elem.tagName == "SELECT" || elem.tagName == "TEXTAREA")
					{
						if (value == null && elem.value != "" && value !== 0 && value !== "0") elem.value = "";
						else if (elem.value != value) elem.value = value;
						elem._old_value = value;
						continue;
					}
				}
				if (key[0] == "@") continue;
				if (key == "style" && value instanceof Runtime.Dict)
				{
					value = value.transition(ctx, (ctx, v, k)=>{ return k + ": " + v; });
					value = Runtime.rs.join(ctx, ";", value);
				}
				if (elem.getAttribute(key) != value)
				{
					elem.setAttribute(key, Runtime.rs.trim(ctx, value));
				}
			}
			
			/* Remove old attributes */
			for (var i=elem.attributes.length - 1; i>=0; i--)
			{
				var attr = elem.attributes[i];
				if (attrs[attr.name] == undefined/* && attr.name != "data-path"*/)
				{
					elem.removeAttribute(attr.name);
				}
			}
		}
		
		/* Bind element events */
		this.bindEvents(ctx, control, elem, attrs, is_new_elem);
		
		/* Set data-path attribute */
		/*elem.setAttribute("data-path", path_id);*/
		
		#endif
	}
	
	
	
	/**
	 * Component model changed
	 */
	public void onChangeComponent(Message<ChangeEvent> msg)
	{
		Component component = msg.sender;
		Collection<string> model_path = component.getModelPath();
		var new_value = msg.data.value;
		this.updateModel(model_path, new_value);
	}
	
	
	
	/**
	 * Bind element events
	 */
	public void bindEvents(RenderDriverControl control, var elem, var attrs, bool is_new_elem = false)
	{
		string path_id = (elem instanceof Component) ? elem.getPath() : elem._path_id;
		
		#ifcode JAVASCRIPT then
		
		for (var key in attrs)
		{
			var value = attrs[key];
			var is_event = key.substring(0, 7) == "@event:";
			var is_event_async = key.substring(0, 12) == "@eventAsync:";
			
			if (key == "@bind" || key == "@name")
			{
				if (elem instanceof Runtime.Web.Component)
				{
					this.register_listeners.pushValue
					(
						ctx,
						{
							"from": elem.getObjectName(),
							"event_class_name": "Runtime.Web.Events.ChangeEvent",
							"object_name": this.getObjectName(),
							"method_name": "onChangeComponent"
						}
					);
				}
				else
				{
					var f_event = function (ctx, controller, path_id, bind_value)
					{
						return function (e)
						{
							var model_path = controller.getBindModelPath(ctx, path_id, bind_value);
							controller.updateModel(ctx, model_path, e.value);
						}
					};
					elem.addEventListener
					(
						"change",
						f_event(ctx, this, path_id, value)
					);
				}
			}
			else if (is_event || is_event_async)
			{
				var event_class_name = "";
				if (is_event) event_class_name = key.substring(7);
				if (is_event_async) event_class_name = key.substring(12);
				
				var event_class = use(event_class_name);
				if (event_class == undefined)
				{
					this.warning(ctx, "Event '" + event_class_name + "' not found in ", elem);
					continue;
				}
				
				/* Find component */
				var class_name = value[0];
				var callback = value[1];
				var component = this.searchComponent(ctx, path_id, class_name);
				if (component == null)
				{
					continue;
				}
				
				if (elem instanceof Runtime.Web.Component)
				{
					this.register_listeners.pushValue
					(
						ctx,
						{
							"from": elem.getObjectName(),
							"event_class_name": event_class_name,
							"object_name": component.getObjectName(),
							"method_name": callback
						}
					);
				}
				else
				{
					var es6_name = event_class.ES6_EVENT_NAME;
					if (es6_name == undefined) continue;
					
					/* Find callback method */
					if (!Runtime.rtl.method_exists(ctx, component, callback))
					{
						this.warning(ctx, "Method '" + callback + "' not found in ", component);
						continue;
					}
					
					/* Register listener */
					this.register_listeners.pushValue
					(
						ctx,
						{
							"from": path_id,
							"event_class_name": event_class_name,
							"object_name": component.getObjectName(),
							"method_name": callback
						}
					);
					
					/* Register event listener */
					elem.addEventListener(es6_name, Runtime.Web.RenderDriver.js_event);
				}
			}
		}
		#endif
	}
	
	
	
	/**
	 * Patch DOM with new childs
	 */
	public void patchElemChilds(var parent_elem, var new_childs)
	{
		#ifcode JAVASCRIPT then
		if (new_childs == null) new_childs = [];
		
		var findElementPos = function (elem, e)
		{
			var childs = elem.childNodes;
			for (var i = 0; i < elem.childNodes.length; i++)
			{
				if (childs[i] == e)
				{
					return i;
				}
			}
			return -1;
		}
		
		var insertFirst = function (elem, e)
		{
			if (elem.childNodes.length == 0)
			{
				elem.appendChild(e);
			}
			else
			{
				elem.insertBefore(e, elem.firstChild);
			}
		}
		
		var insertAfter = function (elem, prev, e)
		{
			if (prev == null)
			{
				insertFirst(elem, e);
				return;
			}
			var next = prev.nextSibling;
			if (next == null)
			{
				elem.appendChild(e);
			}
			else
			{
				elem.insertBefore(e, next);
			}
		}
		
		
		/* Remove elems */
		var i = parent_elem.childNodes.length - 1;
		while (i >= 0)
		{
			var e = parent_elem.childNodes[i];
			if (new_childs.indexOf(e) == -1)
			{
				parent_elem.removeChild(e);
				if (e._path_id != undefined)
				{
					this.remove_keys.pushValue(null, e._path_id);
				}
				/* console.log('Remove child ', i); */
			}
			i--;
		}
		
		
		var prevElem = null;
		for (var i=0; i<new_childs.length; i++)
		{
			var new_e = new_childs[i];
			if (typeof new_e == "string")
			{
				new_e = document.createTextNode(new_e);
			}
			
			var pos = findElementPos(parent_elem, new_e);
			var flag = false;
			
			/* If new element */
			if (pos == -1)
			{
				if (prevElem == null)
				{
					insertFirst(parent_elem, new_e);
					flag = true;
					/* console.log('Insert first ', i); */
				}
				else
				{
					insertAfter(parent_elem, prevElem, new_e);
					flag = true;
					/* console.log('Insert after[1] ', i); */
				}
			}
			
			/* If existing element */
			else
			{
				if (pos - 1 < 0)
				{
					if (i != 0)
					{
						insertAfter(parent_elem, prevElem, new_e);
						flag = true;
						/* console.log('Insert after[2] ', i); */
					}
				}
				else
				{
					var prevSibling = parent_elem.childNodes[pos - 1];
					if (prevElem != prevSibling)
					{
						insertAfter(parent_elem, prevElem, new_e);
						flag = true;
						/* console.log('Insert after[3] ', i); */
					}
				}
			}
			/*
			if (flag)
			{
				var index = this.remove_keys.indexOf(null, new_e._path_id);
				if (index != -1)
					this.remove_keys.remove(null, index, 1);
			}
			*/
			prevElem = new_e;
		}
		#endif
	}
	
}