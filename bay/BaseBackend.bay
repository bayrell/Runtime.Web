/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.BaseProvider;
use Runtime.Callback;
use Runtime.Web.BaseApp;
use Runtime.Web.Layout;
use Runtime.Web.RenderContainer;
use Runtime.Web.Request;
use Runtime.Web.RouteInfo;
use Runtime.Web.RouteList;
use Runtime.Web.Hooks.AppHook;


class BaseBackend extends BaseApp
{
	/**
	 * Run Web Application
	 */
	async int main()
	{
		RenderContainer container = this.createRenderContainer();
		this.findRoute(container);
		await this.resolveRoute(container);
		await this.responseBackend(container);
		return 0;
	}
	
    
    /**
	 * Find route
	 */
	void findRoute(RenderContainer container)
	{
		/* Call hook find route */
		@.callHook(AppHook::FIND_ROUTE, {
			"container": container,
		});
		
		/* Find route */
		if (container.route == null)
		{
			RouteList routes = @.provider(classof RouteList);
			container.route = routes.findRoute(container);
		}
		
		/* Call hook found route */
		await @.callHook(AppHook::FIND_ROUTE_AFTER, {
			"container": container,
		});
	}
    
	
	/**
	 * Init layout
	 */
	async void initLayout(RenderContainer container)
	{
		/* Setup layout */
		this.initLayoutRequest(container);
		
		/* Setup urls */
		this.initLayoutRoutes(container);
		
		/* Call route before */
		await @.callHookAsync(AppHook::INIT_LAYOUT, {
			"container": container,
			"layout": container.layout,
		});
	}
	
	
	/**
	 * Init layout request
	 */
	void initLayoutRequest(RenderContainer container)
	{
		container.layout.route = container.route;
		container.layout.request_host = container.request.host;
		container.layout.request_uri = container.request.uri;
		container.layout.request_full_uri = container.request.full_uri;
		container.layout.request_query = container.request.query;
	}
	
	
	/**
	 * Init layout routes
	 */
	void initLayoutRoutes(RenderContainer container)
	{
		container.layout.routes = {};
		RouteList routes = @.provider(classof RouteList);
		Collection<string> routes_list = routes.routes_list;
		for (int i=0; i<routes_list.count(); i++)
		{
			RouteInfo route = routes_list.get(i);
			if (route.is_backend) continue;
			container.layout.routes.set(route.name, route.uri);
		}
	}
	
	
	/**
	 * Resolve route
	 */
	async void resolveRoute(RenderContainer container)
	{
		/* Setup layout */
		await this.initLayout(container);
		
		/* Call route before */
		await @.callHookAsync(AppHook::ROUTE_BEFORE, {
			"container": container,
		});
		
		/* Call middleware */
		await this.callRouteMiddleware(container);
		
		/* Call route */
		await this.callRoute(container);
		
		/* Call route after */
		await @.callHookAsync(AppHook::RESPONSE, {
			"container": container,
		});
	}
	
	
	/**
	 * Call route
	 */
	async void callRoute(RenderContainer container)
	{
		if (container.base_route != null)
		{
			container.base_route.cancelRoute();
			container.base_route = null;
		}
		if (container.route == null) return;
		if (container.response != null) return;
		if (container.route.method == null) return;
		if (not (container.route.method instanceof Collection)) return;
		if (container.route.method.count() != 2) return;
		
		string class_name = container.route.method.get(0);
		string method_name = container.route.method.get(1);
		
		/* Create route */
		container.base_route = rtl::newInstance(class_name, [container]);
		
		/* Action before */
		await container.base_route.onActionBefore();
		
		/* Call route */
		Callback route = new Callback(container.base_route, method_name);
		await rtl::apply(route);
		
		/* Action after */
		if (not container.base_route.isCancelRoute())
		{
			await container.base_route.onActionAfter();
		}
	}
	
	
	/**
	 * Call route middleware
	 */
	async void callRouteMiddleware(RenderContainer container)
	{
		/* Call hook middleware */
		await @.callHook(AppHook::MIDDLEWARE_BEFORE, {
			"container": container,
		});
		
		if (container.route and container.route.middleware)
		{
			for (int i = 0; i<container.route.middleware.count(); i++)
			{
				Callback middleware = container.route.middleware.get(i);
				await rtl::apply(middleware, [container]);
			}
		}
		
		/* Call hook middleware */
		await @.callHook(AppHook::MIDDLEWARE_AFTER, {
			"container": container,
		});
	}
	
	
	/**
	 * Create request
	 */
	Request createRequest()
	{
		Request request = new Request();
		
		#ifcode PHP then
		
		$host = isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : "";
		$uri = isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : "";
		$method = isset($_SERVER['REQUEST_METHOD']) ? $_SERVER['REQUEST_METHOD'] : "";
		$start_time = isset($_SERVER['REQUEST_TIME_FLOAT']) ? $_SERVER['REQUEST_TIME_FLOAT'] : "";
		$content_type = isset($_SERVER['Content-Type']) ? $_SERVER['Content-Type'] : "";
		
		$query = new \Runtime\Map();
		$payload = new \Runtime\Map();
		$cookies = new \Runtime\Map();
		foreach ($_GET as $key => $val) $query->setValue($key, $val);
		
		/* Read POST */
		$post = null;
		if (substr($content_type, 0, strlen('application/json')) == 'application/json')
		{
			$json = file_get_contents("php://input");
			$post = @json_decode($json);
		}
		else
		{
			if ($method == "POST")
			{
				$post = $_POST;
			}
		}
		if ($post != null)
		{
			foreach ($post as $key => $val)
			{
				$payload->setValue($key, \Runtime\Serializer::NativeToObject($val));
			}
		}
		
		/* Read Cookie */
		foreach ($_COOKIE as $key => $val)
		{
			$cookies->setValue(
				$key,
				new \Runtime\Web\Cookie(
					\Runtime\Dict::from([
						'name' => $key,
						'value' => $val,
					])
				)
			);
		}
		
		/* Setup uri */
		$request->initUri($uri);
		$request->protocol = isset($_SERVER['HTTP_X_FORWARDED_PROTO']) ?
			$_SERVER['HTTP_X_FORWARDED_PROTO'] : "http";
		
		/* Setup request */
		$request->host = $host;
		$request->method = $method;
		$request->query = $query;
		$request->payload = $payload;
		$request->cookies = $cookies;
		$request->headers = \Runtime\Map::from($_SERVER);
		$request->start_time = $start_time;
		
		#endif
		
		return request;
	}
	
	
	/**
	 * Send response
	 */
	async void responseBackend(RenderContainer container)
	{
		#ifcode PHP then
		
		$response = $container->response;
		
		if ($response != null)
		{
			http_response_code($response->http_code);
			
			/* Setup cookies */
			if ($response->cookies != null)
			{
				$response->cookies->each(
					function (Cookie $cookie)
					{
						if ($cookie == null) return;
						if ($cookie->name == "") return;
						
						setcookie
						(
							$cookie->name,
							$cookie->value,
							$cookie->getOptions()
						);
					}
				);
			}
			
			/* Setup headers */
			if ($response->headers != null)
			{
				$response->headers->each(
					function (string $value, string $key)
					{
						header($key . ":" . $value);
					}
				);
			}
			
			/* Redirect */
			if ($response instanceof RedirectResponse)
			{
				header("Location:" . $response->redirect);
			}
			
			echo $response->getContent();
		}
		
		else
		{
			http_response_code(404);
			echo "404 Response not found";
		}
		
		#endif
	}
	
}