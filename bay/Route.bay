/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime.Web;

use Runtime.re;
use Runtime.BaseStruct;


struct Route extends BaseStruct
{
	public string uri = "";
	public string name = "";
	public string class_name = "";
	public string class_method_name = "";
	public string uri_match = "";
	public Collection<string> params = null;
	
	
	
	/**
	 * Init struct data
	 */
	protected static Dict _initData(Route old, Dict changed)
	{
		string uri = static::_initDataGet(old, changed, "uri");
		string uri_match = static::_initDataGet(old, changed, "uri_match");
		
		if (uri_match == "")
		{
			string uri_match = uri;
			uri_match = re::replace("\\/", "\\/", uri_match);
			
			Vector<string> params = new Vector();
			Collection matches = re::matchAll("{(.*?)}", uri);
			if (matches)
			{
				matches.each
				(
					void (Collection arr) use (uri_match, params)
					{
						string name = arr[1];
						uri_match = re::replace
						(
							"{" ~ name ~ "}", 
							"([^\\/]*?)", 
							uri_match
						);
						params.pushValue(name);
					}
				);
				changed = changed.setIm("params", params.toCollection());
			}
			else
			{
				changed = changed.setIm("params", []);
			}
			
			changed = changed.setIm("uri_match", "^" ~ uri_match ~ "$");
		}
		
		return changed;
	}
	
	
	
	/**
	 * Get params
	 * @return Map<string>
	 */
	pure memorize Dict<string> getParams(Collection<string> matches, Route info)
	{
		if (info.params == null or matches == null) return {};
		
		Map<string> res = new Map();
		info.params.each
		(
			void (string name, int pos) use (matches, res)
			{
				string match = matches.get(pos, null);
				if (match)
				{
					res.setValue(name, match);
				}
			}
		);
		
		return res.toDict();
	}
	
	
	
	/**
	 * Replace url
	 */
	pure string replace(string url, Dict params = null)
	{
		url = (params == null) ? url :
			params.reduce
			(
				string (string message, string value, string key) =>
					rs::replace("{" ~ key ~ "}", value, message)
				,
				url
			)
		;
		return url;
	}
	
	
}
