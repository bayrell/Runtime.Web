/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.lib;
use Runtime.Callback;
use Runtime.Serializer;
use Runtime.Web.ApiProvider;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseModel;
use Runtime.Web.CoreUI;
use Runtime.Web.DefaultLayout;
use Runtime.Web.PageModel;
use Runtime.Web.RenderContainer;
use Runtime.Web.RouteInfo;
use Runtime.Web.Hooks.AppHook;


class BaseLayoutModel extends BaseModel
{
	string title = "";
	string lang = "";
	string layout_name = "default";
	string current_page_model = "";
	
	/* Current route */
	RouteInfo route = null;
	string request_full_uri = "";
	string request_host = "";
	string request_uri = "";
	Dict<string> request_query = null;
	
	/* Components list */
	Vector<string> components = [];
	Map<Dict> routes = {};
	
	/* Increment assets */
	string f_inc = "1";
	
	#ifdef BACKEND then
	
	/* Backend storage */
	public Map backend_storage = {};
	
	#endif
	
	
	/**
	 * Create model
	 */
	void constructor(Dict params = null)
	{
		parent(params);
		this.layout = this;
		this.model_path = ["layout"].toCollection();
	}
	
	
	/**
	 * Init layout
	 */
	async void init(RenderContainer container)
	{
	}
	
	
	/**
	 * Process frontend data
	 */
	void processFrontendData(Serializer serializer, Map data)
	{
		serializer.process(this, "components", data);
		serializer.process(this, "current_page_model", data);
		serializer.process(this, "f_inc", data);
		serializer.process(this, "lang", data);
		serializer.process(this, "layout_name", data);
		serializer.process(this, "request_full_uri", data);
		serializer.process(this, "request_host", data);
		serializer.process(this, "request_query", data);
		serializer.process(this, "request_uri", data);
		serializer.process(this, "route", data);
		serializer.process(this, "routes", data);
		serializer.process(this, "title", data);
		parent(serializer, data);
	}
	
	
	/**
	 * Returns model
	 */
	var model(Collection<string> model_path) => rtl::attr(this, model_path);
	
	
	/**
	 * Returns page model
	 */
	PageModel getPageModel()
	{
		return this.widgets.get(this.current_page_model);
	}
	
	
	/**
	 * Returns page class name
	 */
	string getPageClassName()
	{
		PageModel page_model = this.getPageModel();
		return page_model ? page_model.component : "";
	}
	
	
	/**
	 * Set current page model
	 */
	PageModel setPageModel(string class_name)
	{
		PageModel page_model = this.getWidget(class_name);
		
		/* Create page model */
		if (page_model == null)
		{
			page_model = this.addWidget(
				class_name,
				{
					"widget_name": class_name,
				}
			);
		}
		
		/* Change current page model */
		this.current_page_model = class_name;
		
		return page_model;
	}
	
	
	/**
	 * Set layout name
	 */
	void setLayoutName(string layout_name)
	{
		this.layout_name = layout_name;
	}
	
	
	/**
	 * Set page title
	 */
	void setPageTitle(string title)
	{
		this.title = title;
	}
	
	
	/**
	 * Returns full page title
	 */
	string getFullTitle() => this.title;
	
	
	/**
	 * Returns layout component name
	 */
	string getLayoutComponentName()
	{
		string class_name = "";
		if (this.layout_name == "default") class_name = classof DefaultLayout;
		
		Dict params = @.callHook(AppHook::LAYOUT_COMPONENT_NAME, {
			"layout_name": this.layout_name,
			"class_name": class_name,
		});
		
		return params["class_name"];
	}
	
	
	/**
	 * Returns Core UI
	 */
	string getCoreUI() => classof CoreUI;
	
	
	/**
	 * Call Api
	 */
	async ApiResult callApi(Map params)
	{
		#ifdef BACKEND then
		params.set("backend_storage", this.backend_storage);
		#endif
		
		ApiProvider provider = @.provider(classof ApiProvider);
		ApiResult api = await provider.callApi(params);
		return api;
	}
	
	
	/**
	 * Add component
	 */
	void addComponent(string class_name)
	{
		if (this.components.indexOf(class_name) == -1)
		{
			this.components.push(class_name);
		}
	}
	
	
	/**
	 * Returns all components
	 * @return Collection<string>
	 */
	Vector<string> getComponents(Vector components = null)
	{
		if (components == null) components = [];
		
		Vector<string> res = new Vector();
		Map<string> cache = new Map();
		
		components = components.concat(this.components);
		components.push(this.getLayoutComponentName());
		
		/* Call hook */
		Map d = @.callHook(AppHook::COMPONENTS, {
			"layout": this,
			"components": components,
		});
		
		/* Get new components */
		components = d.get("components");
		
		/* Extends components */
		static::_getRequiredComponents(res, cache, components);
		
		return res.removeDuplicates();
	}
	
	
	/**
	 * Returns required modules
	 * @param string class_name
	 * @return Collection<string>
	 */
	static void _getRequiredComponents
	(
		Vector<string> res,
		Map<string> cache,
		Collection<string> components
	)
	{
		if (components == null)
			return;
		
		for (int i=0; i<components.count(); i++)
		{
			string class_name = components.item(i);
			if (class_name == "")
			{
				continue;
			}
			if (not cache.has(class_name))
			{
				cache.set(class_name, true);
				
				Callback f = new Callback(class_name, "components");
				if (f.exists())
				{
					Collection<string> sub_components = rtl::apply(f);
					static::_getRequiredComponents(res, cache, sub_components);
				}
				
				res.push(class_name);
			}
		}
	}
	
	
	/**
	 * Returns css
	 */
	static string getCss(Collection<string> components, Dict css_vars = null)
	{
		if (css_vars == null)
		{
			css_vars = @.callHook(AppHook::CSS_VARS, css_vars);
		}
		
		Collection<string> css = components.map
		(
			string (string component_name) use (css_vars)
			{
				if (component_name == "") return "";
				
				Callback f = new Callback(component_name, "css");
				if (not f.exists()) return "";
				
				string css = rtl::apply(f, [css_vars]);
				return css;
			}
		);
		
		css = css
			.map( string (string s) => rs::trim(s) )
			.filter( bool (string s) => s != "" )
		;
		
		return rs::trim( rs::join("\n", css) );
	}
	
	
	/**
	 * Returns assets
	 */
	string assets(string path) => path;
	
	
	/**
	 * Returns url
	 */
	string url(string route_name, Dict route_params = null)
	{
		if (not this.routes.has(route_name)) return null;
		
		Dict route = this.routes.get(route_name);
		string domain = route.get("domain");
		string url = route.get("uri");
		if (route_params != null)
		{
			route_params.each(
				void (string value, string key) use (url)
				{
					int pos = rs::indexOf(url, "{" ~ key ~ "}");
					if (pos >= 0)
					{
						url = rs::replace("{" ~ key ~ "}", value, url);
					}
					else
					{
						url = rs::url_get_add(url, key, value);
					}
				}
			);
		}
		
		/* Add domain */
		string url_with_domain = url;
		if (domain != "")
		{
			url_with_domain = "//" ~ domain ~ url;
		}
		
		/* Make url */
		Dict res = @.callHook(AppHook::MAKE_URL, {
			"domain": domain,
			"layout": this,
			"route": route,
			"route_name": route_name,
			"route_params": route_params,
			"url": url,
			"url_with_domain": url_with_domain,
		});
		
		return res.get("url_with_domain");
	}
}