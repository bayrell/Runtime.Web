/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.io;
use Runtime.lib;
use Runtime.BaseProvider;
use Runtime.Bus;
use Runtime.Callback;
use Runtime.Curl;
use Runtime.Exceptions.AbstractException;
use Runtime.Exceptions.ApiError;
use Runtime.Exceptions.CurlException;
use Runtime.Exceptions.ItemNotFound;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseApi;
use Runtime.Web.Annotations.Api;
use Runtime.Web.Annotations.ApiMethod;


class ApiProvider extends BaseProvider
{
	/**
	 * Call api
	 */
	async ApiResult callApi(Dict params)
	{
		#ifdef BACKEND then
		
		string service = params["service"] |> default string "app";
		if (service != "app")
		{
			ApiResult result = new ApiResult();
			return result.fail({
				"message": "Service must be app"
			});
		}
		
		try
		{
			Api annotation = this.findApi(params);
			ApiResult result = await this.callAnnotation(annotation, params);
			return result;
		}
		catch (ApiError e)
		{
			ApiResult result = new ApiResult();
			result.fail(e.getPreviousException());
			return result;
		}
		
		#endif
		
		
		#ifdef FRONTEND then
		return await this.sendApi(params);
		#endif
	}
	
	
	#ifdef BACKEND then
	
	Map api_list = {};
	
	
	/**
	 * Init providers
	 */
	async void init()
	{
		await parent::init();
		
		this.api_list = {};
		
		Collection<Api> api_list = @.getEntities(classof Api);
		for (int i=0; i<api_list.count(); i++)
		{
			Api api = api_list.get(i);
			string class_name = api.name;
			Callback getApiName = new Callback(class_name, "getApiName");
			
			/* Save api */
			string api_name = rtl::apply(getApiName);
			this.api_list.set(api_name, api);
		}
	}
	
	
	/**
	 * Returns system backend storage
	 */
	Map getSystemBackendStorage() => {};
	
	
	/**
	 * Call system
	 */
	async ApiResult callSystem(Dict params)
	{
		string service = params["service"] |> default string "app";
		if (service != "app")
		{
			ApiResult result = new ApiResult();
			return result.fail({
				"message": "Service must be app"
			});
		}
		
		try
		{
			Api annotation = this.findSystem(params);
			params.set("backend_storage", this.getSystemBackendStorage());
			ApiResult result = await this.callAnnotation(annotation, params);
			return result;
		}
		catch (ApiError e)
		{
			ApiResult result = new ApiResult();
			result.fail(e.getPreviousException());
			return result;
		}
	}
	
	
	/**
	 * Find local api
	 */
	async Api findApi(Dict params)
	{
		string api_name = params["api_name"] |> default string "";
		string method_name = params["method"] |> default string "";
		
		/* Get annotation by api name */
		Api annotation = this.api_list.get(api_name);
		
		/* Annotation not found */
		if (annotation == null)
		{
			throw new ApiError( new ItemNotFound(api_name, "Api annotation") );
		}
		
		/* Find method */
		Callback getMethodInfoByName = new Callback(annotation.name, "getMethodInfoByName");
		Dict method_info = rtl::apply(getMethodInfoByName, [method_name]);
		
		/* Method not found */
		if (method_info == null)
		{
			throw new ApiError( new ItemNotFound(method_name ~ " in " ~ api_name, "Api method") );
		}
		
		/* Check if method is api */
		bool is_api_method = method_info
			.get("annotations")
			.findItem( lib::isInstance(classof ApiMethod) )
		;
		if (is_api_method == null)
		{
			throw new ApiError( new ItemNotFound(method_name ~ " in " ~ api_name, "Api method") );
		}
		
		return annotation;
	}
	
	
	/**
	 * Call annotation
	 */
	async ApiResult callAnnotation(Api annotation, Dict params)
	{
		string method_name = params["method"] |> default string "";
		Dict data = params["data"] |> default Dict null;
		Dict backend_storage = params["backend_storage"];
		
		/* Create api instance */
		BaseApi api_instance = rtl::newInstance(annotation.name);
		api_instance.action = method_name;
		api_instance.post_data = data;
		api_instance.backend_storage = backend_storage;
		
		/* Call api */
		try
		{
			await api_instance.onActionBefore();
			Callback f = new Callback(api_instance, method_name);
			await rtl::apply(f);
			await api_instance.onActionAfter();
		}
		catch (ApiError e)
		{
			api_instance.result.fail(e.getPreviousException());
		}
		catch (AbstractException e)
		{
			api_instance.result = new ApiResult();
			api_instance.result.exception(e);
		}
		
		/* Return api result */
		return api_instance.result;
	}
	
	#endif
	
	
	
	#ifdef FRONTEND then
	
	/**
	 * Send api to frontend
	 */
	async ApiResult sendApi(Dict params)
	{
		string service = params["service"] |> default string "app";
		string api_name = params["api_name"] |> default string "";
		string method_name = params["method"] |> default string "";
		Dict data = params["data"] |> default Dict null;
		
		string locale_code = "";
		
		Vector api_url_arr = [
			locale_code,
			"api",
			service,
			api_name,
			method_name,
		];
		api_url_arr = api_url_arr.filter( bool (string s) => s != "" );
		string api_url = "/" ~ api_url_arr.join("/") ~ "/";
		
		ApiResult res = new ApiResult();
		try
		{
			Dict post_data = {
				"service": service,
				"api_name": api_name,
				"method_name": method_name,
				"data": data,
			};
			
			/* Send curl */
			Curl curl = new Curl(api_url, {
				"post": post_data,
			});
			string response = await curl.send();
			
			/* Get answer */
			Dict answer = rtl::json_decode(response);
			if (answer and answer instanceof Dict)
			{
				res.importContent(answer);
			}
			
			/* Response error */
			else
			{
				res.exception( new AbstractException("Api response error") );
			}
		}
		catch (CurlException e)
		{
			res.exception(e);
			res.ob_content = e.http_content;
			if (@.env("DEBUG"))
			{
				io::print_error(e.http_content);
			}
		}
		catch (var e)
		{
			throw e;
		}
		
		return res;
	}
	
	#endif
}