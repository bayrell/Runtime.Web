/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.RuntimeConstant;
use Runtime.Core.BusDriverInterface;
use Runtime.Core.CoreDriver;
use Runtime.Core.Message;
use Runtime.Core.RemoteCallAnswer;
use Runtime.Core.RemoteCallRequest;


class ExternalBusDriver extends CoreDriver implements BusDriverInterface
{
	
	/**
	 * Send message
	 * @return string
	 */
	async void sendMessage(Message msg)
	{
	}
	
	
	
	/**
	 * Send message
	 * @return string
	 */
	async RemoteCallAnswer remoteBusCall(RemoteCallRequest request)
	{
		string uri = request.uri;
		string app_name = request.app_name;
		string object_name = request.object_name;
		string interface_name = request.interface_name;
		string method_name = request.method_name;
		var data = request.data;
		var storage = request.storage;
		
		string bus_gate = @.env("X-ROUTE-PREFIX", "") ~ "/api";
		string url = (uri != "") ? uri : 
			bus_gate  + "/" + app_name + "/" + object_name + '/' + interface_name + '/' + method_name + '/'
		;
		
		/* Send post */
		var res = await static::post
		{
			"url": url,
			"data": data,
			"storage": storage,
		};
		
		/* Answer */
		try
		{
			res = rtl::json_decode(res);
		}
		catch (var e)
		{
			res = null;
		}
		
		if (res != null)
		{
			res = new RemoteCallAnswer(res);
		}
		else
		{
			res = new RemoteCallAnswer
			{
				"have_answer": false,
				"error_message": "Json parse error",
				"code": rtl::ERROR_PARSE_SERIALIZATION_ERROR,
				"response": null,
			};
		}
		
		return res;
	}
	
}


#ifcode ES6 then
Object.assign(Runtime.Web.ExternalBusDriver,
{
	/**
	 * Send post. Returns json object or null if error
	 */
	post: async function(ctx, obj)
	{
		var url = obj.get(ctx, "url");
		var data = obj.get(ctx, "data");
		var storage = obj.get(ctx, "storage");
		
		/* Build pos data */
		var build_data = this.buildData(ctx, data, storage);
		var post_data = this.buildPostData(ctx, build_data);
		
		/* Send post */
		var xhr = await this.sendPost(ctx, url, post_data);
		return xhr.responseText;
	},
	
	
	
	/**
	 * Convert data to Native for ajax POST request
	 * @params serializable data
	 * @return Vector
	 */
	buildData: function(ctx, data, storage)
	{
		var res = [];
		data = Runtime.RuntimeUtils.json_encode(ctx, data);
		storage = Runtime.RuntimeUtils.json_encode(ctx, storage);
		/*json = btoa( unescape(encodeURIComponent(json)) );*/
		res.push({"key": "data", "value": data});
		res.push({"key": "storage", "value": storage});
		return res;
	},
	
	
	
	/**
	 * Returns FormData
	 * @params data - json object
	 * @return FormData
	 */
	buildPostData: function(ctx, data)
	{
		var post_data = new FormData();
		
		/* Add data to post data */
		for (var i=0; i<data.length; i++)
		{
			var obj = data[i];
			var key = obj.key;
			var val = obj.value;
			if (val instanceof FileList)
			{
				for (var i=0; i<val.length; i++)
				{
					post_data.append(key + "[]", val.item(i), val.item(i).name);
				}
			}
			else if (val instanceof File)
			{
				post_data.append(key, val, val.name);
			}
			else
			{
				post_data.append(key, val);
			}
		}
		
		return post_data;
	},
	
	
	
	/**
	 * Send api request
	 * @param string class_name
	 * @param string method_name
	 * @param Map<string, mixed> data
	 * @param callback f
	 */ 
	sendPost: async function(ctx, url, post_data)
	{
		return await new Promise((resolve, reject) =>{
			try
			{
				var xhr = new XMLHttpRequest();
				xhr.open('POST', url, true);
				xhr.send(post_data);
				xhr.onreadystatechange = (function(ctx, xhr, resolve, reject) {
					return function()
					{
						if (xhr.readyState != 4) return;
						if (xhr.status == 200)
						{
							resolve(xhr);
						}
						else
						{
							reject
							(
								new Runtime.Exceptions.RuntimeException
								(ctx, xhr.status + " " + xhr.statusText, xhr.status) 
							);
						}
					}
				})(ctx, xhr, resolve, reject);
			}
			catch (e)
			{
				reject(e);
			}
		});
	},
	
});
#endif