/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime.Web.Backend;

use Runtime.lib;
use Runtime.Context;
use Runtime.CoreStruct;
use Runtime.RuntimeConstant;
use Runtime.Annotations.Entity;
use Runtime.Annotations.Provider;
use Runtime.Annotations.LambdaChain;
use Runtime.Annotations.LambdaChainDeclare;
use Runtime.Interfaces.ModuleDescriptionInterface;
use Runtime.Web.Backend.LocalBusProvider;
use Runtime.Web.Backend.RenderChain;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderHelper;


class ModuleDescription implements ModuleDescriptionInterface
{
	
	/**
	 * Returns module name
	 * @return string
	 */
	pure string getModuleName() => "Runtime.Web.Backend";
	
	
	
	/**
	 * Returns module name
	 * @return string
	 */
	pure string getModuleVersion() => "0.8.0";
	
	
	
	/**
	 * Returns required modules
	 * @return Dict<string>
	 */
	pure Dict<string> requiredModules() =>
	{
		'Runtime': '>=0.3',
		'Runtime.Web': '*',
	};
	
	
	
	/**
	 * Returns enities
	 */
	pure Collection<Dict> entities() => 
	[
		/* Extend entities */
		new LambdaChain
		{
			"name": "Runtime.Entities",
			"value": "Runtime.Web.Backend.ModuleDescription::extendEntities",
		},
		
		/* Declare Lambda chain Runtime.Web.Backend.Request */
		new LambdaChainDeclare{ "name": RenderHelper::RENDER_CHAIN, "is_await": true },
		
		/* Find api method */
		new LambdaChain
		{
			"name": RenderHelper::API_CHAIN,
			"value": "Runtime.Web.Backend.LocalBusProvider::findApiMethod",
			"pos": RenderHelper::API_CHAIN_FIND_METHOD,
		},
		
		/* Api Middleware */
		new LambdaChain
		{
			"name": RenderHelper::API_CHAIN,
			"value": "Runtime.Web.Backend.LocalBusProvider::callApiMiddleware",
			"pos": RenderHelper::API_CHAIN_MIDDLEWARE,
			"is_await": true,
		},
		
		/* Api Run */
		new LambdaChain
		{
			"name": RenderHelper::API_CHAIN,
			"value": "Runtime.Web.Backend.LocalBusProvider::callApiRun",
			"pos": RenderHelper::API_CHAIN_RUN,
			"is_await": true,
		},
		
		/* Api Answer */
		new LambdaChain
		{
			"name": RenderHelper::API_CHAIN,
			"value": "Runtime.Web.Backend.LocalBusProvider::callApiAnswer",
			"pos": RenderHelper::API_CHAIN_ANSWER,
		},
		
		/* Start */
		new LambdaChain
		{
			"name": RenderHelper::RENDER_CHAIN,
			"value": "Runtime.Web.Backend.RenderChain::start",
			"pos": RenderHelper::RENDER_CHAIN_START,
		},
		
		/* Create layout model */
		new LambdaChain
		{
			"name": RenderHelper::RENDER_CHAIN,
			"value": "Runtime.Web.Backend.RenderChain::createLayoutModel",
			"pos": RenderHelper::RENDER_CHAIN_CREATE_LAYOUT_MODEL,
		},
		
		/* Set enviroments */
		new LambdaChain
		{
			"name": RenderHelper::RENDER_CHAIN,
			"value": "Runtime.Web.Backend.RenderChain::setFrontendEnviroment",
			"pos": RenderHelper::RENDER_CHAIN_SET_FRONTEND_ENVIROMENTS,
		},
		
		/* Call middleware route */
		new LambdaChain
		{
			"name": RenderHelper::RENDER_CHAIN,
			"value": "Runtime.Web.Backend.RenderChain::callRouteMiddleware",
			"pos": RenderHelper::RENDER_CHAIN_CALL_ROUTE_PRE,
			"is_await": true,
		},
		
		/* Call route */
		new LambdaChain
		{
			"name": RenderHelper::RENDER_CHAIN,
			"value": "Runtime.Web.Backend.RenderChain::callRoute",
			"pos": RenderHelper::RENDER_CHAIN_CALL_ROUTE,
			"is_await": true,
		},
		
		/* Init assets */
		new LambdaChain
		{
			"name": RenderHelper::RENDER_CHAIN,
			"value": "Runtime.Web.Backend.RenderChain::initAssets",
			"pos": RenderHelper::RENDER_CHAIN_INIT_ASSETS,
		},
		
		/* Returns response */
		new LambdaChain
		{
			"name": RenderHelper::RENDER_CHAIN,
			"value": "Runtime.Web.Backend.RenderChain::response",
			"pos": RenderHelper::RENDER_CHAIN_RESPONSE,
		},
		
		/* Seo chain */
		new LambdaChain
		{
			"name": RenderHelper::PATTERN_HEADER_SEO,
			"value": "Runtime.Web.Backend.Pattern::renderSeo",
		},
		
		/* Header After chain */
		new LambdaChain
		{
			"name": RenderHelper::PATTERN_HEADER_AFTER,
			"value": "Runtime.Web.Backend.Pattern::renderHeader",
		},
		
		/* Render body scripts */
		new LambdaChain
		{
			"name": RenderHelper::PATTERN_BODY_AFTER,
			"value": "Runtime.Web.Backend.Pattern::renderBodyScripts",
		},
	];
	
	
	
	/**
	 * Extend entities
	 */
	pure Collection<CoreStruct> extendEntities(Context c, Collection<CoreStruct> entities)
	{
		bool api = c ->
			method config(["Runtime.Web.Backend", "api"], true) ->
			monad lib::to("bool", true)
		;
		bool bus_default = c ->
			method config(["Runtime.Web.Backend", "bus_default"], true) ->
			monad lib::to("bool", true)
		;
		string bus = c ->
			method config(["Runtime.Web.Backend", "bus"], "") ->
			monad lib::to("string", "")
		;
		
		/* Enable api service */
		if (api)
		{
			entities = entities.prependIm( new Entity{ "name": "Runtime.Web.Backend.ApiRoutes" } );
		}
		
		/* Set default bus */
		if (bus == "" and bus_default)
		{
			bus = classof LocalBusProvider;
		}
		
		/* Enable local bus provider */
		if (bus != "")
		{
			entities = entities.prependIm
			(
				new Provider{ "name": RuntimeConstant::BUS_INTERFACE, "value": bus }
			);
		}
		
		return entities;
	}
	
}