/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.Backend;

use Runtime.lib;
use Runtime.CoreProvider;
use Runtime.MessageRPC;
use Runtime.RuntimeConstant;
use Runtime.RuntimeUtils;
use Runtime.Exceptions.ApiException;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.Annotations.Route;
use Runtime.Web.Annotations.RouteList;
use Runtime.Web.Backend.ApiContainer;
use Runtime.Web.JsonResponse;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderHelper;


@RouteList{}
class ApiRoutes 
{
	
	
	/**
	 * Api Action
	 * @return Response
	 */
	@Route
	{ 
		"uri": "/api/{api_name}/{space_name}/{method_name}/", 
		"name": "api:route" 
	} 
	static async RenderContainer ApiAction(RenderContainer container)
	{
		string data1 = container.request.payload.get("DATA", "");
		var data2 = RuntimeUtils::base64_decode_url(data1);
		var data3 = RuntimeUtils::json_decode(data2);
		
		MessageRPC msg = container -> await method sendMessage
		{
			"is_external": true,
			"api_name": container.route_params.item("api_name"),
			"space_name": container.route_params.item("space_name"),
			"method_name": container.route_params.item("method_name"),
			"data": data3,
		};
		
		JsonResponse response = new JsonResponse{ "data": msg.takeDict() };
		container <= response <= response;
		return container;
	}
	
	
}