/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.Crud;

use Runtime.BaseStruct;
use Runtime.Web.ApiResult;
use Runtime.Web.Bus;
use Runtime.Web.RenderContainer;


struct CrudModel<T> extends BaseStruct
{
	int page = 0;
    int pages = 0;
	T item = null;
    Collection<T> items = null;
    Dict dictionary = null;
	Dict api_data = null;
	int error_code = 0;
	string error_message = "";
	string search = "";
	
	
	/**
	 * Get api url
	 */
	static string getApiUrl(string action, Dict data)
	{
		return "";
	}
	
	
	/**
	 * Before action
	 */
	async CrudModel before(string action, Dict data)
	{
		return this;
	}
	
	
	/**
	 * After action
	 */
	async CrudModel after(string action, Dict data)
	{
		return this;
	}
	
	
	/**
	 * Process api data
	 */
	static Dict processApiData(string action, Dict api_data)
	{
		return api_data;
	}
	
	
	/**
	 * Process data
	 */
	Dict getActionSearchData(RenderContainer container)
	{
		int page = (int)container.request.query.get("page", 1);
		
		return {
			"page": page,
		};
	}
	
	
	/**
	 * Search items
	 */
	async CrudModel searchItems(Dict api_data = null)
	{
		if (not api_data) api_data = {};
		
		CrudModel model = this;
		
		/* Before action */
		model <= api_data <= api_data;
		model = await model.processBefore( "searchItems", {} );
		
		/* Send api */
		ApiResult res = await static::searchApi(model.api_data);
		
		if (res.isSuccess())
		{
			model = model.copy({
				"items": res["data"]["items"],
				"pages": res["data"]["pages"],
				"page": res["data"]["page"],
			});
		}
		
		/* Search */
		if (api_data.has("search"))
		{
			model <= search <= api_data["search"];
		}
		
		model <= error_message <= res.getErrorMessage();
		model <= error_code <= res.getErrorCode();
		
		/* After action */
		model = await model.processAfter("searchItems", {
			"res": res,
		});
		
		return model;
	}
	
	
	/**
	 * Search api
	 */
	static async ApiResult searchApi(Dict api_data)
	{
		string url = static::getApiUrl("crud_search", {"api_data": api_data});
		
		api_data = static::processApiData("searchApi", api_data);
		ApiResult res = await Bus::callApi(url, api_data);
		/*res.throwIfException();*/
		
		return res;
	}
	
	
	
	/**
	 * Find item
	 */
	CrudModel findItem(Dict api_data = null)
	{
		if (not api_data) api_data = {};
		
		CrudModel model = this;
		
		/* Before action */
		model <= api_data <= api_data;
		model = await model.processBefore( "findItem", {} );
		
		/* Send api */
		ApiResult res = await static::findItemApi(model.api_data);
		
		if (res.isSuccess())
		{
			model <= item <= res["data", "item"];
		}
		
		model <= error_message <= res.getErrorMessage();
		model <= error_code <= res.getErrorCode();
		
		/* After action */
		model = await model.processAfter("findItem", {
			"res": res,
		});
		
		return model;
	}
	
	
	/**
	 * Get by id Api
	 */
	static async ApiResult findItemApi(Dict api_data)
	{
		if (not api_data.has("post_type")) api_data <= post_type <= "page";
		
		api_data = static::processApiData("findItemApi", api_data);
		string url = static::getApiUrl("crud_item", {"api_data": api_data});
		
		ApiResult res = await Bus::callApi(url, api_data);
		/*res.throwIfException();*/
		
		return res;
	}
		
}
