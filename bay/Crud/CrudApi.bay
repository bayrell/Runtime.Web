/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.Crud;

use Runtime.lib;
use Runtime.BaseStruct;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseRoute;
use Runtime.Web.Bus;
use Runtime.Web.RenderContainer;
use Runtime.Web.Crud.ItemResult;
use Runtime.Web.Crud.SearchResult;
use Runtime.Web.Crud.Rules.CrudRule;
use Runtime.Web.Crud.Rules.Filter;
use Runtime.ORM.Cursor;
use Runtime.ORM.Database;
use Runtime.ORM.Query;
use Runtime.ORM.Relation;


struct CrudApi extends BaseRoute
{
	ApiResult api_result = null;
	
	
	/**
	 * Returns api methods
	 */
	pure string getApiMethod(string api_name)
	{
		if (api_name == "crud_search") return "actionSearch";
		if (api_name == "crud_item") return "actionItem";
		return "";
	}
	
	
	/**
	 * Before route
	 */
	async void onActionBefore()
	{
		await parent::onActionBefore();
	}
	
	
	/**
	 * After route
	 */
	async void onActionAfter()
	{
		await parent::onActionAfter();
	}
	
	
	/**
	 * Returns relation name
	 */
	string getRelationName() => "";
	
	
	/**
	 * Returns model name
	 */
	string getModelName() => "";
	
	
	/**
	 * Returns rules
	 */
	Collection<CrudRule> getRules() =>
	[
	];
	
	
	/**
	 * Build search query
	 */
	Query buildSearchQuery(Query q)
	{
		return q;
	}
	
	
	/**
	 * Build filter
	 */
	Query buildFilter(Query q)
	{
		Collection<string> filter_fields = this.getRules()
			|> .filter( lib::isInstance(classof Filter) )
		;
		
		Vector query_filter = new Vector();
		Collection request_filter = this.container.request.payload["filter"];
		if (request_filter instanceof Collection)
		{
			for (int i=0; i<request_filter.count(); i++)
			{
				Collection filter = request_filter[i];
				if (filter instanceof Collection and filter.count() == 3)
				{
					string field_name = filter[0];
					string field_op = filter[1];
					string field_value = filter[2];
					if (
						rtl::isString(field_name) and
						rtl::isString(field_op) and
						rtl::isString(field_value)
					)
					{
						Filter rule = filter_fields.findItem(
							lib::equalAttr("api_name", field_name)
						);
						
						if (rule)
						{
							query_filter.pushValue([rule.field_name, field_op, field_value]);
						}
					}
				}
			}
		}
		
		return q.filter( query_filter.toCollection() );
	}
	
	
	/**
	 * Before search event
	 */
	async void onSearchBefore()
	{
		Collection<CrudRule> rules = this.getRules();
		for (int i=0; i<rules.count(); i++)
		{
			CrudRule rule = rules[i];
			await rule.onSearchBefore(this);
		}
	}
	
	
	/**
	 * After search event
	 */
	async void onSearchAfter()
	{
		Collection<CrudRule> rules = this.getRules();
		for (int i=0; i<rules.count(); i++)
		{
			CrudRule rule = rules[i];
			await rule.onSearchAfter(this);
		}
	}
	
	
	/**
	 * Returns page limit
	 */
	list getPageLimit()
	{
		int page = (int)(this.container.request.payload["page"] |> default string 1);
		int limit = (int)(this.container.request.payload["limit"] |> default string -1);
		
		if (page <= 1) page = 1;
		if (limit <= 0) limit = 10;
		if (limit > 100) limit = 100;
		
		return [page, limit];
	}
	
	
	/**
	 * Action search
	 */
	async void actionSearch()
	{
		this.action = "actionSearch";
		this.api_result = new ApiResult();
		
		list res = this.getPageLimit();
		int page = res[0];
		int limit = res[1];
		int pages = 0;
		
		/* Search before event */
		await this.onSearchBefore();
		
		/* Query to database */
		string relation_name = static::getRelationName();
		Query q = rtl::method(relation_name, "selectQuery")()
			|> .page(page - 1, limit)
			|> this.buildFilter
			|> this.buildSearchQuery
		;
		
		/* Execute query */
		Cursor c = await Database::execute(q);
		Collection items = await c.fetchAll();
		if (q._limit > 0)
		{
			page = await c.getPage() + 1;
			pages = await c.getPages();
		}
		await c.close();
		
		/* Transform items */
		string model_name = static::getModelName();
		items = items
			|> lib::map(
				Dict (var item) use (model_name) => item
					|> .toModel( model_name )
			)
		;
		
		/* Set api result */
		this.api_result = this.api_result.success({
			"data":
			{
				"page": page,
				"pages": pages,
				"items": items,
				"dictionary": [],
			}
		});
		
		/* Search aftert event */
		await this.onSearchAfter();
		
		/* Set response */
		this.container.setResponse( this.api_result );
	}
	
	
	/**
	 * Action item
	 */
	async void actionItem()
	{
		this.action = "actionItem";
		this.api_result = new ApiResult();
		
		/* Search before event */
		await this.onSearchBefore();
		
		/* Query to database */
		string relation_name = static::getRelationName();
		
		Dict pk = this.container.request.payload["pk"];
		Collection filter = rtl::method(relation_name, "getPrimaryFilter")(pk);
		
		/* Build query */
		Query q = rtl::method(relation_name, "selectQuery")()
			|> .filter(filter)
			|> this.buildSearchQuery
		;
		
		/* Execute query */
		Cursor c = await Database::execute(q);
		Relation item = await c.fetch();
		await c.close();
		
		/* Transform items */
		string model_name = static::getModelName();
		item = item.toModel( model_name );
		
		/* Set api result */
		this.api_result = this.api_result.success({
			"data":
			{
				"item": item,
				"dictionary": [],
			}
		});
		
		/* Search aftert event */
		await this.onSearchAfter();
		
		/* Set response */
		this.container.setResponse( this.api_result );
	}
}
