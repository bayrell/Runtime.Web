/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.Crud.Rules;

use Runtime.lib;
use Runtime.BaseStruct;
use Runtime.ORM.Cursor;
use Runtime.ORM.Database;
use Runtime.ORM.Query;
use Runtime.Web.ApiResult;
use Runtime.Web.Crud.Rules.CrudRule;
use Runtime.Web.Crud.CrudApi;


struct ForeignKey extends CrudRule
{
	CrudApi api = null;
	string api_name = "";
	string primary_key = "";
	string foreign_key = "";
	fn checkSearch = null;
	fn buildSearchQuery = null;
	fn mapItem = null;
	
	
	/**
	 * Search after
	 */
	void onSearchAfter(CrudApi api)
	{
		ForeignKey rule = this;
		ApiResult api_result = api.api_result;
		Collection<Dict> items = [];
		
		rule <= api <= api;
		
		/* Check action */
		if (api.action != "actionSearch" and api.action != "actionItem")
		{
			return;
		}
		if (api.action == "actionSearch") items = api_result.data["items"];
		if (api.action == "actionItem")
		{
			Dict item = api_result.data["item"];
			if (item == null)
			{
				return;
			}
			items = [ item ];
		}
		
		/* Check search rule */
		if (rule.checkSearch)
		{
			fn checkSearch = rule.checkSearch;
			if ( not checkSearch(rule) )
			{
				return;
			}
		}
		
		fn buildSearchQuery = rule.buildSearchQuery;
		fn mapItem = rule.mapItem;
		
		/* Get primary keys */
		Collection<int> pk_ids = items.map( lib::attr(rule.primary_key) );
		
		/* Load rows from database */
		Query q = buildSearchQuery(rule, pk_ids);
		Dict rows = Database::fetchAll(q);
		
		/* Map items */
		items = items.map(
			Dict (Dict item) use (rule, rows, mapItem)
			{
				Map d = new Map();
				Vector res = new Vector();
				d.setValue("res", res);
			
				for (int j=0; j<rows.count(); j++)
				{
					Dict row = rows[j];
					if (item.get(rule.primary_key) == row.get(rule.foreign_key))
					{
						res.pushValue( row );
					}
				}
				
				if (mapItem == null)
				{
					item <= { rule.api_name } <= res.toCollection();
				}
				else
				{
					item = mapItem(rule, item, d);
				}
				
				return item;
			}
		);
		
		if (api.action == "actionSearch") api_result <= data <= items <= items;
		if (api.action == "actionItem") api_result <= data <= item <= items[0];
		
		api.api_result = api_result;
	}
}
